@page "/Auths/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject MyUserServiceLogin MyUserServiceLogin
@layout NoFooterLayout
@inject ILogger<Login> Logger

@inject NavigationManager NavigationManager

<style>

    .form-input {
        flex: 1;
        padding: 10px;
        border: 2px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
        transition: border-color 0.3s ease;
    }

        .form-input:focus {
            outline: none;
            border-color: #007bff;
        }
</style>

<PageTitle>身分驗證</PageTitle>

<div class="login-container">
    <div class="app-title">AI 臨床試驗管理平臺</div>
    <div class="login-card">
        <div class="login-header">
            使用者登入
        </div>

        <EditForm Model="@Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <div class="form-group">
                <label class="form-label">帳號</label>
                <InputText class="form-input" placeholder="請輸入帳號"
                           @bind-Value="@Input.Account" autocomplete="off" />
            </div>

            <div class="form-group">
                <label class="form-label">密碼</label>
                <InputText type="password" class="form-input" placeholder="請輸入密碼"
                           @bind-Value="@Input.Password" autocomplete="off" />
            </div>

            @*             <div class="form-group">
                <label class="form-label">驗證碼</label>
                <div class="captcha-group">
                    <input type="text" class="captcha-input" placeholder="請輸入驗證碼" />
                    <div class="captcha-image">
                        驗證圖片
                    </div>
                </div>
            </div>
 *@
            <div class="login">
                <button class="login-button" type="submit">
                    登入
                </button>

            </div>

            <div style="text-align: center;">
                <NavLink class="register-link" href="/Register">帳號申請</NavLink>
            </div>

            <div class="@errorMessage error-message">
                @message
            </div>
        </EditForm>

        @* <div class="social-login">
                    <h3 class="app-title">AI 臨床試驗管理平臺</h3>
                    <div class="social-icons">
                        <a href="#" class="social-login__icon fab fa-instagram"></a>
                        <a href="#" class="social-login__icon fab fa-facebook"></a>
                        <a href="#" class="social-login__icon fab fa-twitter"></a>
                    </div>
                </div> *@
    </div>
    @* <div class="screen__background">
                <span class="screen__background__shape screen__background__shape4"></span>
                <span class="screen__background__shape screen__background__shape3"></span>
                <span class="screen__background__shape screen__background__shape2"></span>
                <span class="screen__background__shape screen__background__shape1"></span>
            </div> *@
</div>
@code {
    string errorMessage = string.Empty;
    string errorMessageClass = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            try
            {
                if (HttpContext != null)
                {
                    if (HttpMethods.IsGet(HttpContext.Request.Method))
                    {
                        Logger.LogInformation("Cookie : Login: OnInitializedAsync Need SignOut");
                        // Clear the existing external cookie to ensure a clean login process
                        // await HttpContext.SignOutAsync("CookieAuthenticationScheme");
                    }
                    else
                    {
                        Logger.LogInformation("Cookie : Login: OnInitializedAsync No SignOut");
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogDebug(ex, "登入初始化發生例外異常-1");
            }
        }
        catch (Exception ex)
        {
            Logger.LogDebug(ex, "登入初始化發生例外異常");

        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            NavigationManager.NavigateTo("/Auths/Login", forceLoad: true);
        }
    }

    public async Task LoginUser()
    {
        message = "";
        errorMessage = "";
        if (string.IsNullOrEmpty(Input.Account))
        {
            message = "請輸入帳號";
            errorMessage = "alert-danger";
            return;
        }
        else if (string.IsNullOrEmpty(Input.Password))
        {
            message = "請輸入密碼";
            errorMessage = "alert-danger";
            return;
        }
        (string result, MyUser myUser) = await MyUserServiceLogin.LoginAsync(Input.Account, Input.Password);
        if (result != string.Empty)
        {
            message = result;
        }
        else
        {
            #region 加入這個使用者需要用到的 宣告類型 Claim Type
            var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Role, "User"),
                    new Claim(ClaimTypes.Name, myUser.Name),
                    new Claim(ClaimTypes.NameIdentifier, myUser.Account),
                    new Claim(ClaimTypes.Sid, myUser.Id.ToString()),
                };
            #endregion

            #region 建立 宣告式身分識別
            // ClaimsIdentity類別是宣告式身分識別的具體執行, 也就是宣告集合所描述的身分識別
            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            #endregion

            #region 建立關於認證階段需要儲存的狀態
            string returnUrl = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
            var authProperties = new AuthenticationProperties
            {
                IsPersistent = true,
                RedirectUri = returnUrl,
            };
            #endregion

            #region 進行使用登入
            try
            {
                await HttpContext.SignInAsync(
                    "CookieAuthenticationScheme",
                new ClaimsPrincipal(claimsIdentity),
                authProperties);
                // NavigationManager.NavigateTo("/weather", forceLoad:true);
            }
            catch (Exception ex)
            {
                message = ex.Message;
            }
            #endregion
        }
        if (string.IsNullOrEmpty(message))
        {
            errorMessage = "";
        }
        else
        {
            errorMessage = "alert-danger";
        }
    }

    private sealed class InputModel
    {
        // [Required]
        // [EmailAddress]
        public string Account { get; set; } = "";

        // [Required]
        // [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}