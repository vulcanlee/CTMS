@using Newtonsoft.Json
@layout EmptyLayout
@inject UploadFileService UploadFileService
@using CTMS.Share.Helpers
@inject BrowseAthleteService BrowseAthleteService
@inject CurrentAthleteExamine CurrentAthleteExamine

<PageTitle>發炎反應數值軌跡</PageTitle>

<div>
    <div class="header">
        <h1>
            發炎反應數值軌跡
            @foreach (var item in CurrentAthleteExamine.ExamineList)
            {
                string selected = "";
                if (item == CurrentAthleteExamine.ExamineTime)
                {
                    selected = "btn-primary fw-bolder";
                }
                else
                {
                    selected = "btn-outline-primary";
                }
                <span class="mx-3 btn @selected"
                      @onclick="async () => await OnChangeExamineAsync(item)">@item</span>
            }
        </h1>
    </div>

    <div class="container-custom">
        <div class="container m-auto mw-100">
            <div class="row">
                <div class="col-6">
                    <div>
                        <div class="header">
                            <h1>發炎反應數值軌跡</h1>
                        </div>
                        <div>
                            <SfChart Title="Kynurenine & Typtophan 軌跡" EnableAnimation="false">
                                <ChartEvents OnAxisLabelRender="AxisLabelEvent"></ChartEvents>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                                   LabelPlacement="LabelPlacement.OnTicks">
                                    <ChartAxisLabelStyle Size="20px" />
                                </ChartPrimaryXAxis>
                                @* <ChartPrimaryYAxis Maximum="Chart1軌跡YMax" Minimum="Chart1軌跡YMin"> *@
                                <ChartPrimaryYAxis>
                                    <ChartAxisLabelStyle Size="24px" />
                                </ChartPrimaryYAxis>
                                <ChartTooltipSettings Enable="true">
                                    <ChartTooltipTextStyle Size="20px" />
                                </ChartTooltipSettings>
                                <ChartSeriesCollection>
                                    <ChartSeries DataSource="@Line11" XName="X" YName="Y"
                                                 Type="ChartSeriesType.Line" Fill="#000000" Width="3"
                                                 Name="Tryptophan">
                                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                        <ChartMarker Visible="false" Width="7" Height="7" IsFilled="true" Shape="ChartShape.Circle">
                                        </ChartMarker>
                                    </ChartSeries>
                                    <ChartSeries DataSource="@Line12" XName="X" YName="Y"
                                                 Type="ChartSeriesType.Line" Fill="#000000" Width="3"
                                                 DashArray="5,5" Name="Tryptophan (職棒平均)">
                                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                        <ChartMarker Visible="false" Width="7" Height="7" IsFilled="true" Shape="ChartShape.HorizontalLine">
                                        </ChartMarker>
                                    </ChartSeries>
                                    <ChartSeries DataSource="@Line21" XName="X" YName="Y"
                                                 Type="ChartSeriesType.Line" Fill="#ffae00" Width="3"
                                                 Name="Kynurenine">
                                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                        <ChartMarker Visible="false" Width="7" Height="7" IsFilled="true" Shape="ChartShape.Circle">
                                        </ChartMarker>
                                    </ChartSeries>
                                    <ChartSeries DataSource="@Line22" XName="X" YName="Y"
                                                 Type="ChartSeriesType.Line" Fill="#ffae00" Width="3"
                                                 DashArray="5,5" Name="Kynurenine (職棒平均)">
                                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                        <ChartMarker Visible="false" Width="7" Height="7" IsFilled="true" Shape="ChartShape.HorizontalLine">
                                        </ChartMarker>
                                    </ChartSeries>
                                    @* <ChartSeries DataSource="@Line00" XName="X" YName="Y"
                                Type="ChartSeriesType.Line" Fill="#ff0000" Width="1"
                                Name="0">
                                </ChartSeries> *@
                                </ChartSeriesCollection>
                                <ChartLegendSettings Visible="true" Position="LegendPosition.Right"
                                                     TextWrap="@TextWrap.Wrap" MaximumLabelWidth="210"
                                                     Width="210" EnableHighlight="true">
                                    <ChartLegendTextStyle Size="18" />
                                </ChartLegendSettings>

                            </SfChart>
                        </div>
                        <div>
                            <SfChart Title="Kynurenine/Typtophan 軌跡" EnableAnimation="false">
                                <ChartEvents OnAxisLabelRender="AxisLabelEvent"></ChartEvents>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                                   LabelPlacement="LabelPlacement.OnTicks">
                                    <ChartAxisLabelStyle Size="20px" />
                                </ChartPrimaryXAxis>
                                @* <ChartPrimaryYAxis Maximum="Chart2軌跡YMax" Minimum="Chart2軌跡YMin"> *@
                                <ChartPrimaryYAxis>
                                    <ChartAxisLabelStyle Size="24px" />
                                </ChartPrimaryYAxis>
                                <ChartTooltipSettings Enable="true">
                                    <ChartTooltipTextStyle Size="20px" />
                                </ChartTooltipSettings>
                                <ChartSeriesCollection>
                                    <ChartSeries DataSource="@LineA11" XName="X" YName="Y"
                                                 Type="ChartSeriesType.Line" Fill="#000000" Width="3"
                                                 Name="Kyn/Trp">
                                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                        <ChartMarker Visible="false" Width="7" Height="7" IsFilled="true" Shape="ChartShape.Circle">
                                        </ChartMarker>
                                    </ChartSeries>
                                    <ChartSeries DataSource="@LineA12" XName="X" YName="Y"
                                                 Type="ChartSeriesType.Line" Fill="#000000" Width="3"
                                                 DashArray="5,5" Name="Kyn/Trp (職棒平均)">
                                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                        <ChartMarker Visible="false" Width="7" Height="7" IsFilled="true" Shape="ChartShape.HorizontalLine">
                                        </ChartMarker>
                                    </ChartSeries>
                                    @* <ChartSeries DataSource="@LineA00" XName="X" YName="Y"
                                Type="ChartSeriesType.Line" Fill="#ff0000" Width="1"
                                Name="0">
                                </ChartSeries> *@
                                </ChartSeriesCollection>
                                <ChartLegendSettings Visible="true" Position="LegendPosition.Right"
                                                     TextWrap="@TextWrap.Wrap" MaximumLabelWidth="210"
                                                     Width="210" EnableHighlight="true">
                                    <ChartLegendTextStyle Size="18" />
                                </ChartLegendSettings>
                            </SfChart>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div>
                        <div class="header">
                            <h1>運動後30 min</h1>
                        </div>
                        <div class="metric-box">
                            <div class="metric-title">發炎反應</div>
                            <div class="metric-value">@代謝体分析.發炎反應</div>
                        </div>
                        <div>
                            <SfChart Width="100%" EnableAnimation="false">
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                                   LabelPlacement="LabelPlacement.OnTicks"
                                                   LabelPosition="AxisPosition.Outside"
                                                   Coefficient="95"
                                                   LabelIntersectAction="LabelIntersectAction.Rotate90">
                                    <ChartAxisLabelStyle Size="20" />
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis LabelIntersectAction="LabelIntersectAction.Rotate90" />
                                <ChartTooltipSettings Enable="true">
                                    <ChartTooltipTextStyle Size="20px" />
                                </ChartTooltipSettings>
                                <ChartSeriesCollection>
                                    <ChartSeries DataSource="@ChartDatas21" XName="X" YName="Y"
                                                 Width="3" Fill="Red" Name="球員"
                                                 Type="ChartSeriesType.Radar" DrawType="ChartDrawType.Line">
                                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                        <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7"
                                                     Shape="ChartShape.Rectangle">
                                        </ChartMarker>
                                    </ChartSeries>
                                    <ChartSeries DataSource="@ChartDatas23" XName="X" YName="Y"
                                                 Width="3" Fill="#04b4f4" Name="職業平均"
                                                 Type="ChartSeriesType.Radar" DrawType="ChartDrawType.Line">
                                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                        <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7"
                                                     Shape="ChartShape.Rectangle">
                                        </ChartMarker>
                                    </ChartSeries>
                                    <ChartSeries DataSource="@ChartDatas22" XName="X" YName="Y"
                                                 Width="3" Fill="#4ca42c" Name="校隊平均"
                                                 Type="ChartSeriesType.Radar" DrawType="ChartDrawType.Line">
                                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                        <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7"
                                                     Shape="ChartShape.Rectangle">
                                        </ChartMarker>
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                @* <ChartLegendSettings Visible="true" Position="LegendPosition.Bottom"
                                                 TextWrap="@TextWrap.Wrap" MaximumLabelWidth="400"
                                                 Width="400">
                                <ChartLegendTextStyle Size="18" />
                            </ChartLegendSettings> *@
                                <ChartLegendSettings Visible="true" Position="LegendPosition.Bottom" />
                            </SfChart>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Code { get; set; }

    NextGenerationSportsCTMSModel CTMSModel = new();
    代謝体分析Model 代謝体分析 = new();
    數值縱向軌跡發炎反應Model 數值縱向軌跡發炎反應 = new();
    double Chart1軌跡YMax = 0;
    double Chart1軌跡YMin = 0;
    double Chart2軌跡YMax = 0;
    double Chart2軌跡YMin = 0;

    public class ChartData
    {
        public string X { get; set; }
        public double Y { get; set; }
    }

    public List<ChartData> ChartDatas11 = new List<ChartData>();
    public List<ChartData> ChartDatas12 = new List<ChartData>();
    public List<ChartData> ChartDatas13 = new List<ChartData>();
    public List<ChartData> ChartDatas21 = new List<ChartData>();
    public List<ChartData> ChartDatas22 = new List<ChartData>();
    public List<ChartData> ChartDatas23 = new List<ChartData>();
    public List<ChartData> ChartDatas31 = new List<ChartData>();
    public List<ChartData> ChartDatas32 = new List<ChartData>();
    public List<ChartData> ChartDatas33 = new List<ChartData>();

    public List<ChartData> Line00 = new List<ChartData>();
    public List<ChartData> Line11 = new List<ChartData>();
    public List<ChartData> Line12 = new List<ChartData>();
    public List<ChartData> Line21 = new List<ChartData>();
    public List<ChartData> Line22 = new List<ChartData>();
    public List<ChartData> Line31 = new List<ChartData>();
    public List<ChartData> Line32 = new List<ChartData>();
    public List<ChartData> Line41 = new List<ChartData>();
    public List<ChartData> Line42 = new List<ChartData>();

    public List<ChartData> LineA00 = new List<ChartData>();
    public List<ChartData> LineA11 = new List<ChartData>();
    public List<ChartData> LineA12 = new List<ChartData>();
    public List<ChartData> LineA21 = new List<ChartData>();
    public List<ChartData> LineA22 = new List<ChartData>();
    public List<ChartData> LineA31 = new List<ChartData>();
    public List<ChartData> LineA32 = new List<ChartData>();
    public List<ChartData> LineA41 = new List<ChartData>();
    public List<ChartData> LineA42 = new List<ChartData>();

    Athlete Athlete = new();
    List<FileListNodeModel> fileList = new List<FileListNodeModel>();

    protected override async Task OnInitializedAsync()
    {
        Athlete = await BrowseAthleteService.GetByCodeAsync(Code, CurrentAthleteExamine);
        (CTMSModel, fileList) = await BrowseAthleteService
        .GetCurrentDataAsync(Athlete, CurrentAthleteExamine);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
        }
        代謝体分析 = CTMSModel.代謝体分析;
        數值縱向軌跡發炎反應 = CTMSModel.數值縱向軌跡發炎反應;

        BuildChart();
        StateHasChanged();
    }

    async Task OnChangeExamineAsync(string examineTime)
    {
        (CTMSModel, fileList) = await BrowseAthleteService
        .ChangeCurrentDataAsync(Athlete, CurrentAthleteExamine, examineTime);

        StateHasChanged();
    }

    void BuildChart()
    {
        #region 肌肉能量及耗損
        var 肌肉能量及耗損 = 代謝体分析.肌肉能量及耗損;
        var 肌肉能量及耗損校隊平均 = 代謝体分析.肌肉能量及耗損_校隊平均;
        var 肌肉能量及耗損職業平均 = 代謝体分析.肌肉能量及耗損_職業平均;
        ChartDatas11 = new List<ChartData>()
        {
            new ChartData{ X= "Leucine", Y= 肌肉能量及耗損.Leucine.ToDouble() },
            new ChartData{ X= "Isoleucine", Y= 肌肉能量及耗損.Isoleucine.ToDouble() },
            new ChartData{ X= "BCAAs", Y= 肌肉能量及耗損.BCAAs.ToDouble() },
            new ChartData{ X= "Histidine", Y= 肌肉能量及耗損.Histidine.ToDouble() },
            new ChartData{ X= "1-Methylhistidine", Y= 肌肉能量及耗損.x1_Methylhistidine.ToDouble() },
            new ChartData{ X= "3-Methylhistidine", Y= 肌肉能量及耗損.x3_Methylhistidine.ToDouble() },
        };

        ChartDatas12 = new List<ChartData>()
        {
            new ChartData{ X= "Leucine", Y= 肌肉能量及耗損校隊平均.Leucine.ToDouble() },
            new ChartData{ X= "Isoleucine", Y= 肌肉能量及耗損校隊平均.Isoleucine.ToDouble() },
            new ChartData{ X= "BCAAs", Y= 肌肉能量及耗損校隊平均.BCAAs.ToDouble() },
            new ChartData{ X= "Histidine", Y= 肌肉能量及耗損校隊平均.Histidine.ToDouble() },
            new ChartData{ X= "1-Methylhistidine", Y= 肌肉能量及耗損校隊平均.x1_Methylhistidine.ToDouble() },
            new ChartData{ X= "3-Methylhistidine", Y= 肌肉能量及耗損校隊平均.x3_Methylhistidine.ToDouble() },
        };

        ChartDatas13 = new List<ChartData>()
        {
            new ChartData{ X= "Leucine", Y= 肌肉能量及耗損職業平均.Leucine.ToDouble() },
            new ChartData{ X= "Isoleucine", Y= 肌肉能量及耗損職業平均.Isoleucine.ToDouble() },
            new ChartData{ X= "BCAAs", Y= 肌肉能量及耗損職業平均.BCAAs.ToDouble() },
            new ChartData{ X= "Histidine", Y= 肌肉能量及耗損職業平均.Histidine.ToDouble() },
            new ChartData{ X= "1-Methylhistidine", Y= 肌肉能量及耗損職業平均.x1_Methylhistidine.ToDouble() },
            new ChartData{ X= "3-Methylhistidine", Y= 肌肉能量及耗損職業平均.x3_Methylhistidine.ToDouble() },
        };
        #endregion

        #region 發炎狀態
        var 發炎狀態 = 代謝体分析.發炎狀態;
        var 發炎狀態校隊平均 = 代謝体分析.發炎狀態_校隊平均;
        var 發炎狀態職業平均 = 代謝体分析.發炎狀態_職業平均;
        ChartDatas21 = new List<ChartData>()
        {
            new ChartData{ X= "Kyn/Trp", Y= 發炎狀態.KynTrp.ToDouble() },
            new ChartData{ X= "Tryptophan", Y= 發炎狀態.Tryptophan.ToDouble() },
            new ChartData{ X= "Kynurenine", Y= 發炎狀態.Kynurenine.ToDouble() },
        };

        ChartDatas22 = new List<ChartData>()
        {
            new ChartData{ X= "Kyn/Trp", Y= 發炎狀態校隊平均.KynTrp.ToDouble() },
            new ChartData{ X= "Tryptophan", Y= 發炎狀態校隊平均.Tryptophan.ToDouble() },
            new ChartData{ X= "Kynurenine", Y= 發炎狀態校隊平均.Kynurenine.ToDouble() },
        };

        ChartDatas23 = new List<ChartData>()
        {
            new ChartData{ X= "Kyn/Trp", Y= 發炎狀態職業平均.KynTrp.ToDouble() },
            new ChartData{ X= "Tryptophan", Y= 發炎狀態職業平均.Tryptophan.ToDouble() },
            new ChartData{ X= "Kynurenine", Y= 發炎狀態職業平均.Kynurenine.ToDouble() },
        };
        #endregion

        #region 甲基化胺基酸
        var 甲基化胺基酸 = 代謝体分析.甲基化胺基酸;
        var 甲基化胺基酸校隊平均 = 代謝体分析.甲基化胺基酸_校隊平均;
        var 甲基化胺基酸職業平均 = 代謝体分析.甲基化胺基酸_職業平均;
        ChartDatas31 = new List<ChartData>()
        {
            new ChartData{ X= "TMAO", Y= 甲基化胺基酸.TMAO.ToDouble() },
            new ChartData{ X= "Serine", Y= 甲基化胺基酸.Serine.ToDouble() },
            new ChartData{ X= "Glycine", Y= 甲基化胺基酸.Glycine.ToDouble() },
            new ChartData{ X= "Sarcosine", Y= 甲基化胺基酸.Sarcosine.ToDouble() },
            new ChartData{ X= "Choline", Y= 甲基化胺基酸.Choline.ToDouble() },
        };

        ChartDatas32 = new List<ChartData>()
        {
            new ChartData{ X= "TMAO", Y= 甲基化胺基酸校隊平均.TMAO.ToDouble() },
            new ChartData{ X= "Serine", Y= 甲基化胺基酸校隊平均.Serine.ToDouble() },
            new ChartData{ X= "Glycine", Y= 甲基化胺基酸校隊平均.Glycine.ToDouble() },
            new ChartData{ X= "Sarcosine", Y= 甲基化胺基酸校隊平均.Sarcosine.ToDouble() },
            new ChartData{ X= "Choline", Y= 甲基化胺基酸校隊平均.Choline.ToDouble() },
        };

        ChartDatas33 = new List<ChartData>()
        {
            new ChartData{ X= "TMAO", Y= 甲基化胺基酸職業平均.TMAO.ToDouble() },
            new ChartData{ X= "Serine", Y= 甲基化胺基酸職業平均.Serine.ToDouble() },
            new ChartData{ X= "Glycine", Y= 甲基化胺基酸職業平均.Glycine.ToDouble() },
            new ChartData{ X= "Sarcosine", Y= 甲基化胺基酸職業平均.Sarcosine.ToDouble() },
            new ChartData{ X= "Choline", Y= 甲基化胺基酸職業平均.Choline.ToDouble() },
        };
        #endregion

        #region Line Chart KynurenineTyptophan軌跡

        var KynurenineTyptophan軌跡 = 數值縱向軌跡發炎反應.KynurenineTyptophan軌跡;
        Line00 = new List<ChartData>()
        {
            new ChartData { X = "Baseline", Y = 0 },
            new ChartData { X = "15 min", Y = 0 },
            new ChartData { X = "30 min", Y = 0 },
        };
        Line11 = new List<ChartData>()
        {
            new ChartData { X = "Baseline", Y = KynurenineTyptophan軌跡.Tryptophan.Baseline.ToDouble() },
            new ChartData { X = "15 min", Y = KynurenineTyptophan軌跡.Tryptophan.Interval15Min.ToDouble() },
            new ChartData { X = "30 min", Y = KynurenineTyptophan軌跡.Tryptophan.Interval30Min.ToDouble() },
        };
        Line12 = new List<ChartData>()
        {
            new ChartData { X = "Baseline", Y = KynurenineTyptophan軌跡.Tryptophan職棒平均.Baseline.ToDouble() },
            new ChartData { X = "15 min", Y = KynurenineTyptophan軌跡.Tryptophan職棒平均.Interval15Min.ToDouble() },
            new ChartData { X = "30 min", Y = KynurenineTyptophan軌跡.Tryptophan職棒平均.Interval30Min.ToDouble() },
        };
        Line21 = new List<ChartData>()
        {
            new ChartData { X = "Baseline", Y = KynurenineTyptophan軌跡.Kynurenine.Baseline.ToDouble() },
            new ChartData { X = "15 min", Y = KynurenineTyptophan軌跡.Kynurenine.Interval15Min.ToDouble() },
            new ChartData { X = "30 min", Y = KynurenineTyptophan軌跡.Kynurenine.Interval30Min.ToDouble() },
        };
        Line22 = new List<ChartData>()
        {
            new ChartData { X = "Baseline", Y = KynurenineTyptophan軌跡.Kynurenine職棒平均.Baseline.ToDouble() },
            new ChartData { X = "15 min", Y = KynurenineTyptophan軌跡.Kynurenine職棒平均.Interval15Min.ToDouble() },
            new ChartData { X = "30 min", Y = KynurenineTyptophan軌跡.Kynurenine職棒平均.Interval30Min.ToDouble() },
        };
        CountMaxMin(Line11, ref Chart1軌跡YMax, ref Chart1軌跡YMin);
        CountMaxMin(Line12, ref Chart1軌跡YMax, ref Chart1軌跡YMin);
        CountMaxMin(Line21, ref Chart1軌跡YMax, ref Chart1軌跡YMin);
        CountMaxMin(Line22, ref Chart1軌跡YMax, ref Chart1軌跡YMin);

        ArrangeMaxMin(ref Chart1軌跡YMax, ref Chart1軌跡YMin);
        #endregion

        #region Line Chart BCAAs軌跡

        var KynurenineSlashgTyptophan軌跡 = 數值縱向軌跡發炎反應.KynurenineSlashgTyptophan軌跡;
        LineA00 = new List<ChartData>()
        {
            new ChartData { X = "Baseline", Y = 0 },
            new ChartData { X = "15 min", Y = 0 },
            new ChartData { X = "30 min", Y = 0 },
        };
        LineA11 = new List<ChartData>()
        {
            new ChartData { X = "Baseline", Y = KynurenineSlashgTyptophan軌跡.KynTrp.Baseline.ToDouble() },
            new ChartData { X = "15 min", Y = KynurenineSlashgTyptophan軌跡.KynTrp.Interval15Min.ToDouble() },
            new ChartData { X = "30 min", Y = KynurenineSlashgTyptophan軌跡.KynTrp.Interval30Min.ToDouble() },
        };
        LineA12 = new List<ChartData>()
        {
            new ChartData { X = "Baseline", Y = KynurenineSlashgTyptophan軌跡.KynTrp職棒平均.Baseline.ToDouble() },
            new ChartData { X = "15 min", Y = KynurenineSlashgTyptophan軌跡.KynTrp職棒平均.Interval15Min.ToDouble() },
            new ChartData { X = "30 min", Y = KynurenineSlashgTyptophan軌跡.KynTrp職棒平均.Interval30Min.ToDouble() },
        };
        CountMaxMin(LineA11, ref Chart2軌跡YMax, ref Chart2軌跡YMin);
        CountMaxMin(LineA12, ref Chart2軌跡YMax, ref Chart2軌跡YMin);

        ArrangeMaxMin(ref Chart2軌跡YMax, ref Chart2軌跡YMin);
        #endregion
    }

    void CountMaxMin(List<ChartData> data, ref double chart1軌跡YMax, ref double chart1軌跡YMin)
    {
        foreach (var item in data)
        {
            if (item.Y > chart1軌跡YMax)
            {
                chart1軌跡YMax = item.Y;
            }
            if (item.Y < chart1軌跡YMin)
            {
                chart1軌跡YMin = item.Y;
            }
        }
    }

    void ArrangeMaxMin(ref double chart軌跡YMax, ref double chart軌跡YMin)
    {
        // if (chart軌跡YMax <= 0)
        // {
        //     chart軌跡YMax = 0;
        // }
        // if (chart軌跡YMin >= 0)
        // {
        //     chart軌跡YMin = 0;
        // }
        // chart軌跡YMax += 0.05;
        // chart軌跡YMin -= 0.05;
        double v1 = Math.Abs(chart軌跡YMax);
        double v2 = Math.Abs(chart軌跡YMin);
        double v3 = v1 > v2 ? v1 : v2;
        chart軌跡YMax = v3;
        chart軌跡YMin = -v3;
    }

    public void AxisLabelEvent(AxisLabelRenderEventArgs args)
    {
        if (args.Axis.Name == "PrimaryYAxis")
        {
            if (args.Text == "-0")
            {
                args.Text = "0";
            }
        }
    }
}
