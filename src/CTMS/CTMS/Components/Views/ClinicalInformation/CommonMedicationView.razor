@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@inject NavigationManager NavigationManager
@inject PatientService PatientService
@inject DropDownListDataService DropDownListDataService

<PageTitle>臨床資料 合併用藥</PageTitle>

<div>

    <div class="header">
        <div class="d-flex align-items-start">
            <h1 style="margin: 0; flex-grow: 1;">臨床資料 合併用藥</h1>
            <div>
                @if (editMode)
                {
                    <div class="btn-group mx-3 " role="group" aria-label="按鈕組">
                        <button type="button" class="btn btn-sm btn-primary save-button"
                                @onclick=OnSave>
                            儲存
                        </button>
                        <button type="button" class="btn btn-sm btn-danger cancle-button"
                                @onclick=OnCancel>
                            取消
                        </button>
                    </div>
                }
                else
                {
                    <span class="edit-icon d-flex align-items-center cursor-pointer"
                          @onclick="OnChangeEditMode">
                        <i class="mx-3 mdi mdi-18px mdi-pencil-box-outline command-icon-width cursor-pointer"></i>編輯
                    </span>
                }
            </div>
        </div>
    </div>

    <div class="visit-code-container d-flex align-items-center">
        <div class="visit-info">Visit Code :</div>
        <div class="flex-grow-1">
            <SfDropDownList @ref="VisitCodeDropDown"
                            TValue="DropDownListDataModel" TItem="DropDownListDataModel"
                            Placeholder="選擇一個值" DataSource="@ListVisitCode"
                            @bind-Value="@SelectVisitCode" class="w-100">
                <DropDownListFieldSettings Value="Key" Text="Name"></DropDownListFieldSettings>
                <DropDownListEvents TItem="DropDownListDataModel" TValue="DropDownListDataModel"
                                    ValueChange="@OnVisitCodeChanged"></DropDownListEvents>
            </SfDropDownList>
        </div>
    </div>

    @if (data != null)
    {
        <div class="regimen-table-container">
            <div class="">
                @* 新增一筆紀錄按鈕 *@
                <button class="btn btn-primary add-button"
                        @onclick="async () => await OnAddAsync()">
                    新增一筆紀錄
                </button>
            </div>

            <table class="regimen-table">
                <thead>
                    <tr>
                        <th>@data.SubjectNo</th>
                        <th>Treatment Date</th>
                        <th>Durg</th>
                        <th>Dose</th>
                        <th>Route Code</th>
                        <th>Unit Code</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in data.Items)
                    {
                        <tr>
                            <td>
                                @if (editMode)
                                {
                                    <span> No.</span>
                                    @item.Index
                                }
                                else
                                {
                                    <div class="data-value">
                                        <button class="delete-button"
                                                @onclick="async () => await OnDeleteAsync(item)">
                                            <i class="oi oi-trash"></i>
                                        </button>
                                        <span> No.</span>@item.Index
                                    </div>
                                }

                            </td>
                            <td>
                                @if (editMode)
                                {
                                    <SfDatePicker TValue="DateTime" Format="yyyy-MM-dd"
                                                  @bind-Value="@item.TreatmentDate"></SfDatePicker>
                                }
                                else
                                {
                                    <div class="data-value">
                                        @item.TreatmentDate.ToString("yyyy-MM-dd")
                                    </div>
                                }
                            </td>
                            <td>
                                @if (editMode)
                                {
                                    <SfTextBox @bind-Value="item.Durg" />
                                }
                                else
                                {
                                    <div class="data-value">
                                        @item.Durg
                                    </div>
                                }
                            </td>
                            <td>
                                @if (editMode)
                                {
                                    <SfTextBox @bind-Value="item.Dose" />
                                }
                                else
                                {
                                    <div class="data-value">
                                        @item.Dose
                                    </div>
                                }
                            </td>
                            <td>
                                @if (editMode)
                                {
                                    <SfTextBox @bind-Value="item.RouteCode" />
                                }
                                else
                                {
                                    <div class="data-value">
                                        @item.RouteCode
                                    </div>
                                }
                            </td>
                            <td>
                                @if (editMode)
                                {
                                    <SfTextBox @bind-Value="item.UnitCode" />
                                }
                                else
                                {
                                    <div class="data-value">
                                        @item.UnitCode
                                    </div>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }


</div>

<MessageBox Height="@MessageBox.Height" Width="@MessageBox.Width"
            IsVisible="@MessageBox.IsVisible"
            Title="@MessageBox.Title" Message="@MessageBox.Body"
            Callback="MessageBox.MessageDelegate" />

<ConfirmBox Height="@ConfirmMessageBox.Height" Width="@ConfirmMessageBox.Width"
            IsVisible="@ConfirmMessageBox.IsVisible"
            Title="@ConfirmMessageBox.Title" Message="@ConfirmMessageBox.Body"
            Callback="ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />

@code {
    [Parameter]
    public string Code { get; set; }

    PatientData patientData = new();
    PatientAdapterModel patientAdapterModel = new();
    bool editMode = false;

    臨床資料合併用藥Node data = new();
    臨床資料合併用藥 header = new();

    #region 操作 Visit Code 用到的物件
    bool ShowVisitCodeDialog = false;
    ConfirmBoxModel ConfirmMessageBox { get; set; } = new ConfirmBoxModel();
    MessageBoxModel MessageBox { get; set; } = new MessageBoxModel();
    string VisitCodeOperateMode = string.Empty;
    VisitCodeModel VisitCode = new();
    SfDropDownList<DropDownListDataModel, DropDownListDataModel> VisitCodeDropDown;
    DropDownListDataModel SelectVisitCode = new DropDownListDataModel();
    List<DropDownListDataModel> ListVisitCode = new List<DropDownListDataModel>();
    #endregion

    protected override async Task OnInitializedAsync()
    {
        patientAdapterModel = await PatientService.GetAsync(Code);
        patientData.FromJson(patientAdapterModel.JsonData);
        InitData(true);
    }

    void InitData(bool isFirst = true)
    {
        header = patientData.臨床資料.臨床資料合併用藥;
        if (isFirst)
        {
            data = header.Items.FirstOrDefault();
            RefreshVisitCode();
            RefreshDropDwonVisitCode();
            var itemx = ListVisitCode.FirstOrDefault(x => x.Key == data?.VisitCode.Id);
            if (itemx != null)
                SelectVisitCode = itemx;
        }
        else
        {
            if (SelectVisitCode != null)
            {
                data = header.Items.FirstOrDefault(x => x.VisitCode.Id == SelectVisitCode.Key);
            }
        }
    }

    void OnChangeEditMode()
    {
        editMode = !editMode;
    }

    async Task OnSave()
    {
        patientAdapterModel.JsonData = patientData.ToJson();
        await PatientService.UpdateAsync(patientAdapterModel);
        editMode = false;
    }

    async Task OnCancel()
    {
        patientData.FromJson(patientAdapterModel.JsonData);
        InitData(false);
        ReIndexItems();
        editMode = false;
    }

    void ReIndexItems()
    {
        for (int i = 0; i < data.Items.Count; i++)
        {
            data.Items[i].Index = i + 1;
        }
    }

    async Task OnAddAsync()
    {
        data.Items.Add(new());
        ReIndexItems();
        await OnSave();
    }

    async Task OnDeleteAsync(臨床資料合併用藥Item item)
    {
        // Assuming we need to remove the last item for deletion
        if (data.Items.Count > 0)
        {
            data.Items.Remove(item);
            ReIndexItems();
            await OnSave();
        }
    }


    #region 針對 VisitCode 的方法
    private async Task OnVisitCodeChanged(ChangeEventArgs<DropDownListDataModel, DropDownListDataModel> args)
    {
        if (args.Value != null)
        {
            var item = header.Items.FirstOrDefault(x => x.VisitCode.Id == args.Value.Key);
            if (item != null)
            {
                data = item;
            }
        }
    }

    void RefreshVisitCode(bool reset = true)
    {
        #region VisitCode
        {
            ListVisitCode.Clear();
            if (data != null)
            {

            }
            foreach (var nodeItem in header.Items)
            {
                ListVisitCode.Add(new DropDownListDataModel()
                    {
                        Key = nodeItem.VisitCode.Id,
                        Name = nodeItem.VisitCode.VisitCodeTitle,
                    });
            }
            if (reset)
            {
                SelectVisitCode = null;
            }
        }
        #endregion
    }
    void RefreshDropDwonVisitCode()
    {
        // 重置選擇項目
        SelectVisitCode = null;

        // 手動刷新 DropDownList 元件
        if (VisitCodeDropDown != null)
        {
            InvokeAsync(() => VisitCodeDropDown.RefreshDataAsync());
        }
    }
    #endregion
}
