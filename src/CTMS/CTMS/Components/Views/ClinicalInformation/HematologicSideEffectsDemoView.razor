@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@inject NavigationManager NavigationManager
@inject PatientService PatientService
@inject DropDownListDataService DropDownListDataService
@inject SideEffectsService SideEffectsService

<PageTitle>血液副作用 (Adverse event)</PageTitle>

<div class="header">
    <div>
        <h1>血液副作用 (Adverse Event)</h1>
        @* <div class="code">S-20250520074124</div> *@
    </div>
    <div class="buttons">
        <button class="btn btn-add" @onclick=OnAddVisiteCode>新增</button>
        <button class="btn btn-edit" @onclick=OnEditVisiteCode>修改</button>
        <button class="btn btn-delete" @onclick=OnVisiteCodeDeleteAsync>刪除</button>
    </div>
</div>

<div class="visit-code-container d-flex align-items-center">
    <div class="visit-info me-3">Visit Code :</div>
    <div class="flex-grow-1">
        <SfDropDownList @ref="VisitCodeDropDown"
                        TValue="DropDownListDataModel" TItem="DropDownListDataModel"
                        Placeholder="選擇一個值" DataSource="@ListVisitCode"
                        @bind-Value="@SelectVisitCode" class="w-100">
            <DropDownListFieldSettings Value="Key" Text="Name"></DropDownListFieldSettings>
            <DropDownListEvents TItem="DropDownListDataModel" TValue="DropDownListDataModel"
                                ValueChange="@OnVisitCodeChanged"></DropDownListEvents>
        </SfDropDownList>
    </div>
</div>
<table>
    <thead>
        <tr>
            <th></th>
            <th>White blood cell<br>白血球</th>
            <th>Neutrophil count<br>絕對嗜中性白血球數</th>
            <th>hemoglobin (Hb)<br>血色素</th>
            <th>Platelet count<br>血小板</th>
        </tr>
    </thead>
    <tbody>
        <tr class="grade-1">
            <td class="grade-col">grade 1</td>
            <td><span class="lln-text">&lt;LLN - 3000/mm3</span></td>
            <td><span class="lln-text">&lt;LLN - 1500/mm3</span></td>
            <td><span class="lln-text">&lt;LLN - 10.0 g/dL</span></td>
            <td><span class="lln-text">&lt;LLN - 75,000/mm3</span></td>
        </tr>
        <tr class="grade-2">
            <td class="grade-col">grade 2</td>
            <td><span class="range-text">&lt;3000 - 2000/mm3</span></td>
            <td>&lt;1500 - 1000/mm3</td>
            <td>Hgb &lt;10.0 - 8.0 g/dL</td>
            <td>&lt;75,000 - 50,000/mm3</td>
        </tr>
        <tr class="grade-3">
            <td class="grade-col">grade 3</td>
            <td>&lt;2000 - 1000/mm3</td>
            <td><span class="range-text">&lt;1000 - 500/mm3</span></td>
            <td>Hgb &lt;8.0 g/dL</td>
            <td>&lt;50,000 - 25,000/mm3</td>
        </tr>
        <tr class="grade-4">
            <td class="grade-col">grade 4</td>
            <td>&lt;1000</td>
            <td>&lt;500</td>
            <td>-</td>
            <td>&lt;25,000/mm3</td>
        </tr>
        <tr class="grade-5">
            <td class="grade-col">grade 5</td>
            <td>-</td>
            <td>-</td>
            <td class="death-text">Death</td>
            <td>-</td>
        </tr>
    </tbody>
</table>
<VisitCodeAssessmentDateDialog OpenPicker=ShowVisitCodeDialog
                               data=VisitCode
                               OnConfirmCallback=OnVisiteCodeConfirmAsync />

<MessageBox Height="@MessageBox.Height" Width="@MessageBox.Width"
            IsVisible="@MessageBox.IsVisible"
            Title="@MessageBox.Title" Message="@MessageBox.Body"
            Callback="MessageBox.MessageDelegate" />

<ConfirmBox Height="@ConfirmMessageBox.Height" Width="@ConfirmMessageBox.Width"
            IsVisible="@ConfirmMessageBox.IsVisible"
            Title="@ConfirmMessageBox.Title" Message="@ConfirmMessageBox.Body"
            Callback="ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />

@code {
    [Parameter]
    public string Code { get; set; }

    PatientData patientData = new();
    PatientAdapterModel patientAdapterModel = new();
    bool editMode = false;
    HematologicSideEffects血液副作用Node data = new();
    HematologicSideEffects血液副作用 header = new();

    List<DropDownListDataModel> ListCardiovascularIncludeHtnYesNo = new List<DropDownListDataModel>();
    List<string> ListYesNo = new List<string>();

    #region 操作 Visit Code 用到的物件
    bool ShowVisitCodeDialog = false;
    ConfirmBoxModel ConfirmMessageBox { get; set; } = new ConfirmBoxModel();
    MessageBoxModel MessageBox { get; set; } = new MessageBoxModel();
    string VisitCodeOperateMode = string.Empty;
    VisitCodeModel VisitCode = new();
    SfDropDownList<DropDownListDataModel, DropDownListDataModel> VisitCodeDropDown;
    DropDownListDataModel SelectVisitCode = new DropDownListDataModel();
    List<DropDownListDataModel> ListVisitCode = new List<DropDownListDataModel>();
    #endregion

    protected override async Task OnInitializedAsync()
    {
        patientAdapterModel = await PatientService.GetAsync(Code);
        patientData.FromJson(patientAdapterModel.JsonData);
        InitData(true);
    }

    void InitData(bool isFirst = true)
    {
        header = patientData.臨床資料.HematologicSideEffects血液副作用;
        if (isFirst)
        {
            data = header.Items.FirstOrDefault();
            RefreshVisitCode();
            RefreshDropDwonVisitCode();
            var itemx = ListVisitCode.FirstOrDefault(x => x.Key == data?.VisitCode.Id);
            if (itemx != null)
                SelectVisitCode = itemx;
        }
        else
        {
            if (SelectVisitCode != null)
            {
                data = header.Items.FirstOrDefault(x => x.VisitCode.Id == SelectVisitCode.Key);
            }
        }
    }

    #region 針對 VisitCode 的方法
    void OnAddVisiteCode()
    {
        VisitCode = new();
        VisitCodeOperateMode = "Add";
        ShowVisitCodeDialog = true;
    }

    void OnEditVisiteCode()
    {

        VisitCode = header.Items.FirstOrDefault(x => x.VisitCode.Id == SelectVisitCode.Key)?.VisitCode;
        VisitCodeOperateMode = "Edit";
        ShowVisitCodeDialog = true;
    }

    async Task OnVisiteCodeDeleteAsync()
    {
        if (SelectVisitCode != null)
        {
            var checkTask = await ConfirmMessageBox.ShowAsync("400px", "200px", "警告",
                 $"確認要刪除這筆 Visit Code ({SelectVisitCode.Name}) 紀錄嗎?", ConfirmMessageBox.HiddenAsync);
            if (checkTask)
            {
                var itemDelete = header.Items.FirstOrDefault(x => x.VisitCode.Id == SelectVisitCode.Key);
                if (itemDelete != null)
                {
                    SelectVisitCode = null;
                    data = null;
                    header.Items.Remove(itemDelete);
                    patientAdapterModel.JsonData = patientData.ToJson();
                    await PatientService.UpdateAsync(patientAdapterModel);
                    RefreshVisitCode();
                    RefreshDropDwonVisitCode();
                }
            }
        }
        ShowVisitCodeDialog = false;
    }

    private async Task OnVisitCodeChanged(ChangeEventArgs<DropDownListDataModel, DropDownListDataModel> args)
    {
        if (args.Value != null)
        {
            var item = header.Items.FirstOrDefault(x => x.VisitCode.Id == args.Value.Key);
            if (item != null)
            {
                data = item;
            }
        }
    }

    void RefreshVisitCode(bool reset = true)
    {
        #region VisitCode
        {
            ListVisitCode.Clear();
            if (data != null)
            {

            }
            foreach (var nodeItem in header.Items)
            {
                ListVisitCode.Add(new DropDownListDataModel()
                {
                    Key = nodeItem.VisitCode.Id,
                    Name = nodeItem.VisitCode.VisitCodeTitle,
                });
            }
            if (reset)
            {
                SelectVisitCode = null;
            }
        }
        #endregion
    }

    void RefreshDropDwonVisitCode()
    {
        // 重置選擇項目
        SelectVisitCode = null;

        // 手動刷新 DropDownList 元件
        if (VisitCodeDropDown != null)
        {
            InvokeAsync(() => VisitCodeDropDown.RefreshDataAsync());
        }
    }

    async Task OnVisiteCodeConfirmAsync(VisitCodeModel visitCodeModel)
    {
        if (VisitCodeOperateMode == "Add")
        {
            var newRecord = new HematologicSideEffects血液副作用Node()
            {
                VisitCode = visitCodeModel,
            };

            SideEffectsService.InitAll(newRecord);
            SideEffectsService.Update副作用All(patientData.臨床資料, newRecord);
            header.Items.Add(newRecord);
            patientData.SyncData();
            patientAdapterModel.JsonData = patientData.ToJson();
            await PatientService.UpdateAsync(patientAdapterModel);
            RefreshVisitCode();
            RefreshDropDwonVisitCode();
        }
        else if (VisitCodeOperateMode == "Edit")
        {
            var editItem = header.Items.FirstOrDefault(x => x.VisitCode.Id == visitCodeModel.Id);
            if (editItem != null)
            {
                data.VisitCode.AssessmentDate = visitCodeModel.AssessmentDate;
                data.VisitCode.CycleMonth = visitCodeModel.CycleMonth;
                data.VisitCode.Timeline = visitCodeModel.Timeline;
                SideEffectsService.Update副作用All(patientData.臨床資料, data);
                patientAdapterModel.JsonData = patientData.ToJson();
                await PatientService.UpdateAsync(patientAdapterModel);
                RefreshVisitCode(false);
                RefreshDropDwonVisitCode();
                var foo = ListVisitCode.FirstOrDefault(x => x.Key == visitCodeModel.Id);
                if (foo != null)
                {
                    SelectVisitCode = foo;
                }
                else
                {
                    SelectVisitCode = null;
                }
            }
        }
        ShowVisitCodeDialog = false;

    }
    #endregion

}
