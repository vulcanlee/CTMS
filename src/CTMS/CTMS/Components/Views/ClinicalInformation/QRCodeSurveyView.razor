@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using QRCoder
@inject NavigationManager NavigationManager
@inject PatientService PatientService
@inject DropDownListDataService DropDownListDataService
@inject SurveyService SurveyService

<PageTitle>行動裝置填寫問卷 QR Code</PageTitle>

<div>

    <div class="header">
        <div>
            <div class="d-flex align-items-start">
                <h1 style="margin: 0; flex-grow: 1;">行動裝置填寫問卷 QR Code</h1>
            </div>
            <SubjectNoView PatientAdapterModel="@patientAdapterModel" />
        </div>
        <div class="buttons">
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(currentMobilePageUrl))
    {
        <div class="qr-code-container my-4">
            <div class="mb-2">
                <span class="me-2">手機填寫連結:</span>
                <a href="@currentMobilePageUrl" target="_blank" rel="noopener">@currentMobilePageUrl</a>
            </div>

            @if (!string.IsNullOrWhiteSpace(qrCodeDataUrl))
            {
                <img src="@qrCodeDataUrl"
                     alt="Survey Mobile QR Code"
                     style="width:400px;height:400px;border:1px solid #eee;padding:4px;background:#fff;border-radius:4px;" />
            }
        </div>
    }
</div>

<MessageBox Height="@MessageBox.Height" Width="@MessageBox.Width"
            IsVisible="@MessageBox.IsVisible"
            Title="@MessageBox.Title" Message="@MessageBox.Body"
            Callback="MessageBox.MessageDelegate" />

<ConfirmBox Height="@ConfirmMessageBox.Height" Width="@ConfirmMessageBox.Width"
            IsVisible="@ConfirmMessageBox.IsVisible"
            Title="@ConfirmMessageBox.Title" Message="@ConfirmMessageBox.Body"
            Callback="ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />

@code {
    [Parameter]
    public string Code { get; set; }

    PatientData patientData = new();
    PatientAdapterModel patientAdapterModel = new();
    bool editMode = false;
    string currentPageUrl = string.Empty;
    string currentMobilePageUrl = string.Empty;
    string qrCodeDataUrl = string.Empty;

    Survey家族史問卷Node data = new();
    Survey家族史問卷 header = new();

    #region 操作 Visit Code 用到的物件
    bool ShowVisitCodeDialog = false;
    ConfirmBoxModel ConfirmMessageBox { get; set; } = new ConfirmBoxModel();
    MessageBoxModel MessageBox { get; set; } = new MessageBoxModel();
    string VisitCodeOperateMode = string.Empty;
    VisitCodeModel VisitCode = new();
    SfDropDownList<DropDownListDataModel, DropDownListDataModel> VisitCodeDropDown;
    DropDownListDataModel SelectVisitCode = new DropDownListDataModel();
    List<DropDownListDataModel> ListVisitCode = new List<DropDownListDataModel>();
    #endregion

    protected override async Task OnInitializedAsync()
    {
        patientAdapterModel = await PatientService.GetAsync(Code);
        patientData.FromJson(patientAdapterModel.JsonData);

        InitData(true);

        // 獲取當前頁面的 URL
        currentPageUrl = NavigationManager.Uri;
        currentMobilePageUrl = currentPageUrl.Replace("Survey", "SurveyMobile");

        GenerateQrCodeForMobileUrl();
    }

    void GenerateQrCodeForMobileUrl()
    {
        if (string.IsNullOrWhiteSpace(currentMobilePageUrl))
        {
            qrCodeDataUrl = string.Empty;
            return;
        }

        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(currentMobilePageUrl, QRCodeGenerator.ECCLevel.Q);
        var qrCode = new PngByteQRCode(qrCodeData);
        var qrCodeBytes = qrCode.GetGraphic(pixelsPerModule: 10); // 調整顆粒度
        qrCodeDataUrl = $"data:image/png;base64,{Convert.ToBase64String(qrCodeBytes)}";
    }

    void InitData(bool isFirst = true)
    {
        header = patientData.臨床資料.Survey家族史問卷;
        if (isFirst)
        {
            data = header.Items.FirstOrDefault();

            if (data != null)
            {
                SurveyService.Reset(data.Questions);
                foreach (var item in data.Questions)
                {
                    SurveyService.RefreshByQuestionChanged(data.Questions, item);
                }
            }

            RefreshVisitCode();
            RefreshDropDwonVisitCode();
            var itemx = ListVisitCode.FirstOrDefault(x => x.Key == data?.VisitCode.Id);
            if (itemx != null)
                SelectVisitCode = itemx;
        }
        else
        {
            if (SelectVisitCode != null)
            {
                data = header.Items.FirstOrDefault(x => x.VisitCode.Id == SelectVisitCode.Key);
            }
        }
    }

    void OnChangeEditMode()
    {
        editMode = !editMode;
    }

    async Task OnSaveAsync()
    {
        patientAdapterModel.JsonData = patientData.ToJson();
        await PatientService.UpdateAsync(patientAdapterModel);
        InitData(false);
        editMode = false;
        // <MessageBox Height="@MessageBox.Height" Width="@MessageBox.Width"
        //             IsVisible="@MessageBox.IsVisible"
        //             Title="@MessageBox.Title" Message="@MessageBox.Body"
        //             Callback="MessageBox.MessageDelegate" />

        MessageBox.Show("400px", "200px", "資訊", "儲存成功", MessageBox.HiddenAsync);
    }

    async Task OnCancel()
    {
        patientData.FromJson(patientAdapterModel.JsonData);
        editMode = false;
        InitData(false);
    }

    void OnOptionChange(Question question, List<Option> options, Option option)
    {
        question.Answer = "";
        foreach (var item in options)
        {
            item.CheckBoxIcon = MagicObjectHelper.CheckBoxBlankIcon;
        }

        option.CheckBoxIcon = MagicObjectHelper.CheckBoxIcon;
        question.Answer = option.Value.ToString();

        SurveyService.RefreshByQuestionChanged(data.Questions, question);
    }

    #region 針對 VisitCode 的方法
    private async Task OnVisitCodeChanged(ChangeEventArgs<DropDownListDataModel, DropDownListDataModel> args)
    {
        if (args.Value != null)
        {
            var item = header.Items.FirstOrDefault(x => x.VisitCode.Id == args.Value.Key);
            if (item != null)
            {
                data = item;
            }
        }
    }

    void RefreshVisitCode(bool reset = true)
    {
        #region VisitCode
        {
            ListVisitCode.Clear();
            if (data != null)
            {

            }
            foreach (var nodeItem in header.Items)
            {
                ListVisitCode.Add(new DropDownListDataModel()
                {
                    Key = nodeItem.VisitCode.Id,
                    Name = nodeItem.VisitCode.VisitCodeTitle,
                });
            }
            if (reset)
            {
                SelectVisitCode = null;
            }
        }
        #endregion
    }
    void RefreshDropDwonVisitCode()
    {
        // 重置選擇項目
        SelectVisitCode = null;

        // 手動刷新 DropDownList 元件
        if (VisitCodeDropDown != null)
        {
            InvokeAsync(() => VisitCodeDropDown.RefreshDataAsync());
        }
    }
    #endregion
}
