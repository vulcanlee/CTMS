@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars

@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService
@inject AuthenticationStateHelper AuthenticationStateHelper
@inject AuthenticationStateProvider authStateProvider
@inject BrowseAthleteService BrowseAthleteService
@inject CurrentAthleteExamine CurrentAthleteExamine
@inject PatientService PatientService
@inject BrowsePatientService BrowsePatientService
@inject NavigationManager NavigationManager
@inject DropDownListDataService DropDownListDataService
@inject AutoMapper.IMapper Mapper
@inject BrowseSearchingService BrowseSearchingService

<div class="browse-container">
    <!-- 功能按鈕區域 -->
    <div class="function-buttons">
        <button class="btn btn-add" @onclick="@(async () => await OnAddAsync())">
            <span class="icon-plus">+</span> 新增病患資料
        </button>
        <button class="btn btn-refresh" @onclick="@(async () => await OnRefreshAsync())">
            <span class="icon-refresh">↻</span> 重新整理
        </button>
        <div class="search-container">
            <div class="search-box">
                <span class="search-icon" @onclick=OnSetKeyword>🔍</span>
                <input type="text" placeholder="搜尋病患編號" @bind="Keyword" />
            </div>
        </div>
    </div>

    <!-- 篩選條件區域 -->
    <div class="filter-section">
        <div class="filter-header">
            <h2>篩選條件</h2>
            <a class="clear-filter"
               @onclick="@(async () => await RemovellFilterAsync())">清除所有篩選條件</a>
        </div>

        <div class="filter-items">
            <div class="filter-group">
                <label>醫院名稱</label>
                <div class="select-container">
                    <SfDropDownList TValue="DropDownListDataModel" TItem="DropDownListDataModel"
                                    Placeholder="請選擇醫院名稱" DataSource="@List院別"
                                    @bind-Value="@Select院別" class="flex-grow-1">
                        <DropDownListFieldSettings Value="Key" Text="Name"></DropDownListFieldSettings>
                        <DropDownListEvents TItem="DropDownListDataModel" TValue="DropDownListDataModel"
                                            ValueChange="@On院別Changed"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <div class="filter-group">
                <label>癌症類型</label>
                <div class="select-container">
                    <SfDropDownList TValue="DropDownListDataModel" TItem="DropDownListDataModel"
                                    Placeholder="請選擇癌症類型" DataSource="@List癌別"
                                    @bind-Value="@Select癌別" class="flex-grow-1">
                        <DropDownListFieldSettings Value="Key" Text="Name"></DropDownListFieldSettings>
                        <DropDownListEvents TItem="DropDownListDataModel" TValue="DropDownListDataModel"
                                            ValueChange="@On癌別Changed"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <div class="filter-tags">
                @foreach (var item in browseFilterCondition.Items)
                {
                    <div class="filter-tag">
                        @item.Name
                        <span class="tag-remove" @onclick="@(async () => await RemoveFilterAsync(item))">×</span>
                    </div>
                }
            </div>
        </div>

        <div class="filter-result">
            <span class="result-icon">✓</span> 共找到 @FoundCount 位符合條件的病患
        </div>
    </div>

    <!-- 結果表格區域 -->
    <div class="results-table">
        <table>
            <thead>
                <tr>
                    <th>病人編號</th>
                    <th>醫院名稱</th>
                    <th>癌症類型</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var iPatient in patientsAdapterModel)
                {
                    patientData.FromJson(iPatient.JsonData);

                    string id = patientData.臨床資訊.SubjectNo; // Accessing PatientId property

                    @*                     string hospital = id.StartsWith("NCKUH") ? "成大醫院" :
                    id.StartsWith("CMU") ? "奇美醫院" : "郭綜合醫院";

                    string cancerType = patientData.臨床資訊.ECorOC == "EC" ? "子宮頸癌" : "卵巢癌";
 *@
                    string hospital = iPatient.醫院;

                    string cancerType = iPatient.癌別;

                    <tr>
                        <td>@id</td>
                        <td>@hospital</td>
                        <td>@cancerType</td>
                        <td class="action-buttons">
                            <button class="btn-edit" title="修改"
                                    @onclick="@(async () => await OnEditAsync(iPatient))">
                                <span class="icon-edit">✏️</span> 修改
                            </button>
                            <button class="btn-delete" title="刪除"
                                    @onclick="@(async () => await OnDeleteAsync(iPatient))">
                                <span class="icon-delete">🗑️</span> 刪除
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<AddPatientDialog OpenPicker=@ShowAddPatientDialog OnConfirmCallback=OnAddPatientAsync />

<MessageBox Height="@MessageBox.Height" Width="@MessageBox.Width"
            IsVisible="@MessageBox.IsVisible"
            Title="@MessageBox.Title" Message="@MessageBox.Body"
            Callback="MessageBox.MessageDelegate" />

<ConfirmBox Height="@ConfirmMessageBox.Height" Width="@ConfirmMessageBox.Width"
            IsVisible="@ConfirmMessageBox.IsVisible"
            Title="@ConfirmMessageBox.Title" Message="@ConfirmMessageBox.Body"
            Callback="ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />


@code {
    HomePageModel HomePageModel = new();
    string imagefile = "";

    ConfirmBoxModel ConfirmMessageBox { get; set; } = new ConfirmBoxModel();
    MessageBoxModel MessageBox { get; set; } = new MessageBoxModel();
    string RoleMessage = string.Empty;

    bool ShowAddPatientDialog = false;

    List<Patient> patients = new();
    List<PatientAdapterModel> patientsAdapterModel = new();
    PatientData patientData = new();

    BrowseFilterCondition browseFilterCondition = new();
    string Keyword = string.Empty;
    int FoundCount = 0;

    #region 拉霸選單物件宣告
    List<DropDownListDataModel> List癌別 = new List<DropDownListDataModel>();
    DropDownListDataModel Select癌別 = new DropDownListDataModel();
    List<DropDownListDataModel> List院別 = new List<DropDownListDataModel>();
    DropDownListDataModel Select院別 = new DropDownListDataModel();
    #endregion

    protected override async Task OnInitializedAsync()
    {
        Keyword = BrowseSearchingService.BrowseSearchingModel.SearchKeyword;
        foreach (var item in BrowseSearchingService.BrowseSearchingModel.院別)
        {
            browseFilterCondition.Items.Add(new BrowseFilterConditionNode()
            {
                Category = MagicObjectHelper.院別,
                Name = item,
            });
        }
        foreach (var item in BrowseSearchingService.BrowseSearchingModel.癌別)
        {
            browseFilterCondition.Items.Add(new BrowseFilterConditionNode()
            {
                Category = MagicObjectHelper.癌別,
                Name = item,
            });
        }
        DropDownListDataInit();
        await ReloadAsync();
    }

    async Task OnSetKeyword()
    {
        BrowseSearchingService.SetSearchKeyword(Keyword);
        await ReloadAsync();
    }

    async Task ReloadAsync()
    {
        patientsAdapterModel = await PatientService.GetAsync(BrowseSearchingService.BrowseSearchingModel);
        FoundCount = patientsAdapterModel.Count;
        StateHasChanged(); // 更新 UI
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
    }

    async Task OnEditAsync(PatientAdapterModel patientAdapterModel)
    {
        patientData.FromJson(patientAdapterModel.JsonData);
        var url = $"/BasicClinical/{patientAdapterModel.Code}";
        NavigationManager.NavigateTo(url);

    }

    async Task OnDeleteAsync(PatientAdapterModel patientAdapterModel)
    {

        patientData.FromJson(patientAdapterModel.JsonData);

        // 使用 ConfirmMessageBox 來確認刪除操作
        var confirmDelete = await ConfirmMessageBox.ShowAsync("400px", "200px",
        "刪除病患資料", $"確定要刪除病患 {patientData.臨床資訊.SubjectNo} 的資料嗎？",
        ConfirmMessageBox.HiddenAsync);

        if (confirmDelete == true)
        {
            // 刪除病患資料的邏輯
            var deleteResult = await PatientService.DeleteAsync(patientAdapterModel.Id);
            if (deleteResult.Success)
            {
                // 刪除成功，顯示提示訊息
                // await MessageBox.ShowAsync("400px", "200px", "成功", "病患資料已成功刪除。", MessageBox.HiddenAsync);
                await ReloadAsync();
            }
            else
            {
                // 刪除失敗，顯示錯誤訊息
                await MessageBox.ShowAsync("400px", "200px", "錯誤", deleteResult.Message, MessageBox.HiddenAsync);
            }
            StateHasChanged(); // 更新 UI
        }
        else
        {
            // 使用者取消刪除操作
        }
    }

    async Task OnAddAsync()
    {
        ShowAddPatientDialog = true;
    }

    async Task OnAddPatientAsync(string Hospital)
    {
        if (Hospital != null)
        {
            await AddNewPatientAsync(Hospital);
        }
        ShowAddPatientDialog = false;
    }

    async Task AddNewPatientAsync(string Hospital)
    {
        // 呼叫新增病患的服務方法
        var result = await PatientService.AddEmptyAsync(Hospital);
        if (result.Success)
        {
            // 新增成功，顯示提示訊息
            await MessageBox.ShowAsync("400px", "200px", "成功", "病患資料已成功新增。", MessageBox.HiddenAsync);
            await ReloadAsync();
        }
        else
        {
            // 新增失敗，顯示錯誤訊息
            await MessageBox.ShowAsync("400px", "200px", "錯誤", result.Message, MessageBox.HiddenAsync);
        }
    }


    async Task OnRefreshAsync()
    {
        await ReloadAsync();
    }

    void DropDownListDataInit()
    {
        #region 癌別
        {
            List癌別 = DropDownListDataService.Get癌別();
        }
        #endregion

        #region 院別
        {
            List院別 = DropDownListDataService.Get院別();
        }
        #endregion

    }

    async Task RemoveFilterAsync(BrowseFilterConditionNode item)
    {
        if (item == null) return;
        browseFilterCondition.Items.Remove(item);
        if (item.Category == MagicObjectHelper.院別)
            BrowseSearchingService.RemoveHospital(item.Name);
        else if (item.Category == MagicObjectHelper.癌別)
            BrowseSearchingService.RemoveCancerType(item.Name);
        await ReloadAsync();
    }

    async Task RemovellFilterAsync()
    {
        BrowseSearchingService.Reset();
        browseFilterCondition.Items.Clear();
        BrowseSearchingService.Reset();
        await ReloadAsync();
    }

    async Task On院別Changed(ChangeEventArgs<DropDownListDataModel, DropDownListDataModel> args)
    {
        if (args.Value == null) return;
        // patientData.臨床資訊.ECorOC = args.Value.Key;

        var item = browseFilterCondition.Items.FirstOrDefault(i => i.Name == args.Value.Name);
        if (item == null)
        {
            browseFilterCondition.Items.Add(new BrowseFilterConditionNode
            {
                Category = MagicObjectHelper.院別,
                Name = args.Value.Name
            });
            BrowseSearchingService.AddHospital(args.Value.Name);
        }

        await ReloadAsync();
    }

    async Task On癌別Changed(ChangeEventArgs<DropDownListDataModel, DropDownListDataModel> args)
    {
        if (args.Value == null) return;

        var item = browseFilterCondition.Items.FirstOrDefault(i => i.Name == args.Value.Name);
        if (item == null)
        {
            browseFilterCondition.Items.Add(new BrowseFilterConditionNode
            {
                Category = MagicObjectHelper.癌別,
                Name = args.Value.Name
            });
            BrowseSearchingService.AddCancerType(args.Value.Name);
        }

        await ReloadAsync();
    }
}