@page "/Motion"
@using Newtonsoft.Json
@layout EmptyLayout
@inject UploadFileService UploadFileService
@inject BrowseAthleteService BrowseAthleteService
@inject CurrentAthleteExamine CurrentAthleteExamine

<PageTitle>動作分析能力</PageTitle>

<div class="container-custom">
    <div class="header">
        <h1>
            動作分析能力
            @foreach (var item in CurrentAthleteExamine.ExamineList)
            {
                string selected = "";
                if (item == CurrentAthleteExamine.ExamineTime)
                {
                    selected = "btn-primary fw-bolder";
                }
                else
                {
                    selected = "btn-outline-primary";
                }
                <span class="mx-3 btn @selected"
                      @onclick="async () => await OnChangeExamineAsync(item)">@item</span>
            }
        </h1>
    </div>
    <div class="metrics">
        <div class="metric-box">
            <div class="metric-title">軀幹旋轉</div>
            <div class="metric-value">@MotionModel.旋轉</div>
        </div>
        <div class="metric-box">
            <div class="metric-title">軀幹穩定</div>
            <div class="metric-value">@MotionModel.穩定</div>
        </div>
        <div class="metric-box">
            <div class="metric-title">軀幹前彎</div>
            <div class="metric-value">@MotionModel.前彎</div>
        </div>
        <div class="metric-box">
            <div class="metric-title">軀幹伸展</div>
            <div class="metric-value">@MotionModel.伸展</div>
        </div>
        <div class="metric-box">
            <div class="metric-title">軀幹側彎</div>
            <div class="metric-value">@MotionModel.側彎</div>
        </div>
        <div class="metric-box">
            <div class="metric-title">抬腿</div>
            <div class="metric-value">@MotionModel.抬腿</div>
        </div>
    </div>
    <div class="charts">
        <div class="chart-box">
            <div>
                <SfChart Width="600px" Height="650px" EnableAnimation="false">
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                       LabelPlacement="LabelPlacement.OnTicks" LabelPosition="AxisPosition.Outside"
                                       Coefficient="70"
                                       LabelIntersectAction="LabelIntersectAction.Rotate90">
                        <ChartAxisLabelStyle Size="32" />
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis LabelIntersectAction="LabelIntersectAction.Rotate90"
                                       Maximum="100" Minimum="0">
                        <ChartAxisLabelStyle Size="18" />
                    </ChartPrimaryYAxis>
                    <ChartTooltipSettings Enable="true">
                        <ChartTooltipTextStyle Size="20px" />
                    </ChartTooltipSettings>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ChartDatas1" XName="X" YName="Y" Width="3"
                                     Fill="Red"
                                     Type="ChartSeriesType.Radar" DrawType="ChartDrawType.Line">
                            <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                            <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7"
                                Shape="ChartShape.Rectangle"></ChartMarker>
                        </ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>
            </div>
            <div class="chart-label">肌肉量</div>
        </div>
        <div class="chart-box">
            <div>
                <SfChart Width="600px" Height="650px" EnableAnimation="false">
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                       LabelPlacement="LabelPlacement.OnTicks" 
                                       LabelPosition="AxisPosition.Outside"
                                       Coefficient="70"
                                       LabelIntersectAction="LabelIntersectAction.Rotate90">
                        <ChartAxisLabelStyle Size="32" />
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis LabelIntersectAction="LabelIntersectAction.Rotate90"
                                       Maximum="100" Minimum="0">
                        <ChartAxisLabelStyle Size="18" />
                    </ChartPrimaryYAxis>
                    <ChartTooltipSettings Enable="true">
                        <ChartTooltipTextStyle Size="20px" />
                    </ChartTooltipSettings>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ChartDatas2" XName="X" YName="Y" Width="3"
                                     Fill="Red"
                                     Type="ChartSeriesType.Radar" DrawType="ChartDrawType.Line">
                            <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                            <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7" Shape="ChartShape.Rectangle"></ChartMarker>
                        </ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>
            </div>
            <div class="chart-label">肌肉品質</div>
        </div>
    </div>
    <div class="charts-center">
        <div class="chart-box">
            <div>
                <SfChart Width="600px" Height="650px" EnableAnimation="false">
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                       LabelPlacement="LabelPlacement.OnTicks"
                                       LabelPosition="AxisPosition.Outside"
                                       Coefficient="70" LabelPadding="30"
                                       LabelIntersectAction="LabelIntersectAction.Rotate90">
                        <ChartAxisLabelStyle Size="32" />
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis LabelIntersectAction="LabelIntersectAction.Rotate90"
                                       Maximum="100" Minimum="0">
                        <ChartAxisLabelStyle Size="18" />
                    </ChartPrimaryYAxis>
                    <ChartTooltipSettings Enable="true">
                        <ChartTooltipTextStyle Size="20px" />
                    </ChartTooltipSettings>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ChartDatas3" XName="X" YName="Y" Width="3"
                                     Fill="Red"
                                     Type="ChartSeriesType.Radar" DrawType="ChartDrawType.Line">
                            <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                            <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7" Shape="ChartShape.Rectangle"></ChartMarker>
                        </ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>
            </div>
            <div class="chart-label">校正肌力表現</div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Code { get; set; }

    public class ChartData
    {
        public string X { get; set; }
        public double Y { get; set; }
    }

    public List<ChartData> ChartDatas1 = new List<ChartData>();
    public List<ChartData> ChartDatas2 = new List<ChartData>();
    public List<ChartData> ChartDatas3 = new List<ChartData>();


    NextGenerationSportsCTMSModel CTMSModel = new();
    BodyMotionAnalysis動作分析Model MotionModel = new();

    Athlete Athlete = new();
    List<FileListNodeModel> fileList = new List<FileListNodeModel>();

    protected override async Task OnInitializedAsync()
    {
        Athlete = await BrowseAthleteService.GetByCodeAsync(Code, CurrentAthleteExamine);
        (CTMSModel, var fileList) = await BrowseAthleteService
        .GetCurrentDataAsync(Athlete, CurrentAthleteExamine);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
        MotionModel = CTMSModel.MotionAnalysis動作分析2;

        BuildChart();
        StateHasChanged();
    }

    async Task OnChangeExamineAsync(string examineTime)
    {
        (CTMSModel, fileList) = await BrowseAthleteService
        .ChangeCurrentDataAsync(Athlete, CurrentAthleteExamine, examineTime);

        StateHasChanged();
    }

    void BuildChart()
    {
        var mass1Model = MotionModel.肌肉量Radar;
        ChartDatas1 = new List<ChartData>()
        {
            new ChartData{ X= "旋轉", Y= mass1Model.Rotate旋轉.ToDouble() },
            new ChartData{ X= "穩定", Y= mass1Model.Stablize穩定.ToDouble() },
            new ChartData{ X= "前彎", Y= mass1Model.BendForward前彎.ToDouble() },
            new ChartData{ X= "伸展", Y= mass1Model.Stretch伸展.ToDouble() },
            new ChartData{ X= "側彎", Y= mass1Model.SideBend側彎.ToDouble() },
            new ChartData{ X= "抬腿", Y= mass1Model.LiftLeg抬腿.ToDouble() }
        };
        mass1Model = MotionModel.肌肉品質Radar;
        ChartDatas2 = new List<ChartData>()
        {
            new ChartData{ X= "旋轉", Y= mass1Model.Rotate旋轉.ToDouble() },
            new ChartData{ X= "穩定", Y= mass1Model.Stablize穩定.ToDouble() },
            new ChartData{ X= "前彎", Y= mass1Model.BendForward前彎.ToDouble() },
            new ChartData{ X= "伸展", Y= mass1Model.Stretch伸展.ToDouble() },
            new ChartData{ X= "側彎", Y= mass1Model.SideBend側彎.ToDouble() },
            new ChartData{ X= "抬腿", Y= mass1Model.LiftLeg抬腿.ToDouble() }
        };
        mass1Model = MotionModel.肌力表現Radar;
        ChartDatas3 = new List<ChartData>()
        {
            new ChartData{ X= "旋轉", Y= mass1Model.Rotate旋轉.ToDouble() },
            new ChartData{ X= "穩定", Y= mass1Model.Stablize穩定.ToDouble() },
            new ChartData{ X= "前彎", Y= mass1Model.BendForward前彎.ToDouble() },
            new ChartData{ X= "伸展", Y= mass1Model.Stretch伸展.ToDouble() },
            new ChartData{ X= "側彎", Y= mass1Model.SideBend側彎.ToDouble() },
            new ChartData{ X= "抬腿", Y= mass1Model.LiftLeg抬腿.ToDouble() }
        };
    }
}