@page "/Quality"
@using CTMS.Share.Helpers
@using Newtonsoft.Json
@layout EmptyLayout
@inject UploadFileService UploadFileService
@inject BrowseAthleteService BrowseAthleteService
@inject CurrentAthleteExamine CurrentAthleteExamine

<PageTitle>身體組成-肌肉品質</PageTitle>

<div class="container-custom">
    <div class="header">
        <h1>
            身體組成-肌肉品質
            @foreach (var item in CurrentAthleteExamine.ExamineList)
            {
                string selected = "";
                if (item == CurrentAthleteExamine.ExamineTime)
                {
                    selected = "btn-primary fw-bolder";
                }
                else
                {
                    selected = "btn-outline-primary";
                }
                <span class="mx-3 btn @selected"
                      @onclick="async () => await OnChangeExamineAsync(item)">@item</span>
            }
        </h1>
    </div>
    <div class="main-content">
        <div class="left-middle-outside-panel">
            <div class="left-middle-inside-panel">
                <div class="left-panel">
                    <table class="info-table">
                        <tr>
                            <td>偏度</td>
                            <td>@CTMSModel.BodyMuscleQuality肌肉品質Model.Skewness偏度</td>
                        </tr>
                        <tr>
                            <td>峰度</td>
                            <td>@CTMSModel.BodyMuscleQuality肌肉品質Model.Kurtosis峰度</td>
                        </tr>
                        <tr>
                            <td>健康肌肉比</td>
                            <td>@CTMSModel.BodyMuscleQuality肌肉品質Model.HealthyMuscleRatio健康肌肉比</td>
                        </tr>
                    </table>
                </div>
                <div class="middle-panel">
                    <img src="@imageHist" class="chart-img">
                </div>
            </div>
            <div class="metrics">
                <div class="w-100">
                    <div class="metric-box">
                        <div class="metric-title">高品質肌肉健康度</div>
                        <div class="metric-value">@QualityModel.HighQualityMuscleHealthScore高品質肌肉健康度</div>
                    </div>
                    <div>
                        <SfChart Width="600px" Height="650px" EnableAnimation="false">
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                               LabelPlacement="LabelPlacement.OnTicks"
                                               LabelPosition="AxisPosition.Outside"
                                               Coefficient="65"
                                               LabelIntersectAction="LabelIntersectAction.Rotate90">
                                <ChartAxisLabelStyle Size="28" />
                            </ChartPrimaryXAxis>
                            <ChartPrimaryYAxis LabelIntersectAction="LabelIntersectAction.Rotate90"
                                               Maximum="100" Minimum="0">
                                <ChartAxisLabelStyle Size="18" />
                            </ChartPrimaryYAxis>
                            <ChartTooltipSettings Enable="true">
                                <ChartTooltipTextStyle Size="20px" />
                            </ChartTooltipSettings>
                            <ChartSeriesCollection>
                                <ChartSeries DataSource="@ChartDatas1" XName="X" YName="Y" Width="3"
                                             Fill="Red"
                                             Type="ChartSeriesType.Radar" DrawType="ChartDrawType.Line">
                                    <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                    <ChartMarker IsFilled="true" Visible="true"
                                                 Height="7" Width="7" Shape="ChartShape.Rectangle">
                                    </ChartMarker>
                                </ChartSeries>
                            </ChartSeriesCollection>
                        </SfChart>
                    </div>
                </div>
                <div class="w-100">
                    <div class="metric-box">
                        <div class="metric-title">肌肉脂肪浸潤度</div>
                        <div class="metric-value">@(100 - QualityModel.MuscleHealthScore肌肉健康度.ToInt())</div>
                    </div>
                    <div>
                        <SfChart Width="600px" Height="650px" EnableAnimation="false">
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                               LabelPlacement="LabelPlacement.OnTicks"
                                               Coefficient="65"
                                               LabelPosition="AxisPosition.Outside"
                                               LabelIntersectAction="LabelIntersectAction.Rotate90">
                                <ChartAxisLabelStyle Size="28" />
                            </ChartPrimaryXAxis>
                            <ChartPrimaryYAxis LabelIntersectAction="LabelIntersectAction.Rotate90"
                                               Maximum="100" Minimum="0">
                                <ChartAxisLabelStyle Size="18" />
                            </ChartPrimaryYAxis>
                            <ChartTooltipSettings Enable="true">
                                <ChartTooltipTextStyle Size="20px" />
                            </ChartTooltipSettings>
                            <ChartSeriesCollection>
                                <ChartSeries DataSource="@ChartDatas2" XName="X" YName="Y" Width="3"
                                             Fill="Red"
                                             Type="ChartSeriesType.Radar" DrawType="ChartDrawType.Line">
                                    <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                    <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7" Shape="ChartShape.Rectangle">
                                        @*                                         <ChartDataLabel Visible="true"  >
                                            <ChartDataLabelFont Color="Red" Size="20px" />
                                        </ChartDataLabel>
 *@                                    </ChartMarker>
                                </ChartSeries>
                            </ChartSeriesCollection>
                        </SfChart>
                    </div>
                </div>
            </div>
        </div>
        <div class="right-panel">
            <img src="@imageMuscleQuality" class="ct-scan-img">
            <img src="@imageNama" class="ct-scan-img">
            <img src="@imageLama" class="ct-scan-img">
            <img src="@imageImat" class="ct-scan-img">
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Code { get; set; }

    public class ChartData
    {
        public string X { get; set; }
        public double Y { get; set; }
    }

    public List<ChartData> ChartDatas1 = new List<ChartData>();
    public List<ChartData> ChartDatas2 = new List<ChartData>();

    NextGenerationSportsCTMSModel CTMSModel = new();
    BodyMuscleQuality肌肉品質Model QualityModel = new();

    string imageHist = "";
    string imageMuscleQuality = "";
    string imageNama = "";
    string imageLama = "";
    string imageImat = "";

    Athlete Athlete = new();
    List<FileListNodeModel> fileList = new List<FileListNodeModel>();

    protected override async Task OnInitializedAsync()
    {
        Athlete = await BrowseAthleteService.GetByCodeAsync(Code, CurrentAthleteExamine);
        (CTMSModel, fileList) = await BrowseAthleteService
        .GetCurrentDataAsync(Athlete, CurrentAthleteExamine);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
        QualityModel = CTMSModel.BodyMuscleQuality肌肉品質Model;

        imageHist = FileListHelper.GetHist(fileList);
        imageMuscleQuality = FileListHelper.GetMuscleQuality(fileList);
        imageNama = FileListHelper.GetNama(fileList);
        imageLama = FileListHelper.GetLama(fileList);
        imageImat = FileListHelper.GetImat(fileList);

        BuildChart();
        StateHasChanged();
    }

    async Task OnChangeExamineAsync(string examineTime)
    {
        (CTMSModel, fileList) = await BrowseAthleteService
        .ChangeCurrentDataAsync(Athlete, CurrentAthleteExamine, examineTime);

        BuildChart();
        StateHasChanged();
    }

    void BuildChart()
    {
        var mass1Model = QualityModel.MuscleHealthScore肌肉健康度RadarChartModel;
        ChartDatas1 = new List<ChartData>()
        {
               new ChartData{ X= "內斜肌_外斜肌_腹橫肌", Y= mass1Model.InternalObliqueExternalObliqueTransversusAbdominis內斜肌_外斜肌_腹橫肌.ToDouble() },
            new ChartData{ X= "腹直肌", Y= mass1Model.RectusAbdominis腹直肌.ToDouble() },
            new ChartData{ X= "腰方肌", Y= mass1Model.QuadratusLumborum腰方肌.ToDouble() },
            new ChartData{ X= "豎脊肌_多裂肌", Y= mass1Model.ErectorSpinaeMultifidus豎脊肌_多裂肌.ToDouble() },
            new ChartData{ X= "腰肌", Y= mass1Model.PsoasMuscle腰肌.ToDouble() },
        };
        mass1Model = QualityModel.HighQualityMuscleHealthScore高品質肌肉健康度RadarChartModel;
        ChartDatas2 = new List<ChartData>()
        {
            new ChartData{ X= "內斜肌_外斜肌_腹橫肌", Y= (100-mass1Model.InternalObliqueExternalObliqueTransversusAbdominis內斜肌_外斜肌_腹橫肌.ToDouble() )},
            new ChartData{ X= "腹直肌", Y= (100-mass1Model.RectusAbdominis腹直肌.ToDouble() )},
            new ChartData{ X= "腰方肌", Y= (100-mass1Model.QuadratusLumborum腰方肌.ToDouble()) },
            new ChartData{ X= "豎脊肌_多裂肌", Y= (100-mass1Model.ErectorSpinaeMultifidus豎脊肌_多裂肌.ToDouble()) },
            new ChartData{ X= "腰肌", Y= (100-mass1Model.PsoasMuscle腰肌.ToDouble()) },
        };
    }
}