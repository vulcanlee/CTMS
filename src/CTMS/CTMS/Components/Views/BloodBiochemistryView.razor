@using Newtonsoft.Json
@layout EmptyLayout
@inject UploadFileService UploadFileService
@inject BrowseAthleteService BrowseAthleteService
@inject CurrentAthleteExamine CurrentAthleteExamine

<PageTitle>抽血檢驗(特殊血液生化)</PageTitle>

<div class="container-custom">
    <div class="header">
        <h1>
            抽血檢驗(特殊血液生化)
            @foreach (var item in CurrentAthleteExamine.ExamineList)
            {
                string selected = "";
                if (item == CurrentAthleteExamine.ExamineTime)
                {
                    selected = "btn-primary fw-bolder";
                }
                else
                {
                    selected = "btn-outline-primary";
                }
                <span class="mx-3 btn @selected"
                      @onclick="async () => await OnChangeExamineAsync(item)">@item</span>
            }
        </h1>
    </div>
    <div class="">
        <table>
            <thead>
                <tr>
                    <th class="title-width">檢驗項目</th>
                    <th class="reference-width">參考區間</th>
                    <th>運動前</th>
                    <th>運動後15分鐘</th>
                    <th>運動後30分鐘</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in 抽血檢驗Items)
                {
                    <tr>
                        <td class="@item.TextClassName">@item.檢驗項目</td>
                        <td class="@item.TextClassName">@item.參考區間</td>
                        <td class="@item.TextClassName運動前">@item.運動前</td>
                        <td class="@item.TextClassName運動後15分鐘">@item.運動後15分鐘</td>
                        <td class="@item.TextClassName運動後30分鐘">@item.運動後30分鐘</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public string Code { get; set; }

    NextGenerationSportsCTMSModel CTMSModel = new();
    public 抽血檢驗_特殊Model data { get; set; } = new();
    List<抽血檢驗_血液生化特殊Model> 抽血檢驗Items = new();

    Athlete Athlete = new();
    List<FileListNodeModel> fileList = new List<FileListNodeModel>();

    protected override async Task OnInitializedAsync()
    {
        Athlete = await BrowseAthleteService.GetByCodeAsync(Code, CurrentAthleteExamine);
        (CTMSModel, fileList) = await BrowseAthleteService
        .GetCurrentDataAsync(Athlete, CurrentAthleteExamine);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
        }
        data = CTMSModel.抽血檢驗_特殊;
        抽血檢驗Items = CTMSModel.抽血檢驗_特殊Items;
        StateHasChanged();
    }

    async Task OnChangeExamineAsync(string examineTime)
    {
        (CTMSModel, fileList) = await BrowseAthleteService
        .ChangeCurrentDataAsync(Athlete, CurrentAthleteExamine, examineTime);

        StateHasChanged();
    }
}