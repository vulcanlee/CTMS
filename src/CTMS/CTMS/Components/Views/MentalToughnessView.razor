@using Newtonsoft.Json
@layout EmptyLayout
@inject UploadFileService UploadFileService
@inject BrowseAthleteService BrowseAthleteService
@inject CurrentAthleteExamine CurrentAthleteExamine

<PageTitle>心理韌性</PageTitle>

<div class="container-custom">
    <div class="header">
        <h1>
            心理韌性
            @foreach (var item in CurrentAthleteExamine.ExamineList)
            {
                string selected = "";
                if (item == CurrentAthleteExamine.ExamineTime)
                {
                    selected = "btn-primary fw-bolder";
                }
                else
                {
                    selected = "btn-outline-primary";
                }
                <span class="mx-3 btn @selected"
                      @onclick="async () => await OnChangeExamineAsync(item)">@item</span>
            }
        </h1>
    </div>
    <div class="metrics">
        <div class="metric-box dark-blue">
            <div class="metric-title">冒險性</div>
            <div class="metric-value">@data.冒險性</div>
            @* <div class="metric-value">@data.每公斤最大耗氧量</div>
            <div class="metric-title">(ml/kg/min)</div> *@
        </div>
        <div class="metric-box dark-blue">
            <div class="metric-title">抗壓力</div>
            <div class="metric-value">@data.抗壓力</div>
        </div>
        <div class="metric-box dark-blue">
            <div class="metric-title">堅持度</div>
            <div class="metric-value">@data.堅持度</div>
        </div>
    </div>
    <div class="radar-chart m-auto">
        <SfChart Width="600px" Height="650px" EnableAnimation="false">
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                               LabelPlacement="LabelPlacement.OnTicks"
                               LabelPosition="AxisPosition.Outside"
                               Coefficient="70"
                               LabelIntersectAction="LabelIntersectAction.Rotate90">
                <ChartAxisLabelStyle Size="28" />
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis LabelIntersectAction="LabelIntersectAction.Rotate90"
                               Maximum="5" Minimum="0">
                <ChartAxisLabelStyle Size="18" />
            </ChartPrimaryYAxis>
            <ChartTooltipSettings Enable="true">
                <ChartTooltipTextStyle Size="20px" />
            </ChartTooltipSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@ChartDatas1" XName="X" YName="Y" Width="3"
                             Fill="Red"
                             Type="ChartSeriesType.Radar" DrawType="ChartDrawType.Line">
                    <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                    <ChartMarker IsFilled="true" Visible="true"
                                 Height="7" Width="7" Shape="ChartShape.Rectangle">
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>

    </div>
</div>

@code {
    [Parameter]
    public string Code { get; set; }

    NextGenerationSportsCTMSModel CTMSModel = new();
    心理韌性Model data = new();

    public class ChartData
    {
        public string X { get; set; }
        public double Y { get; set; }
    }
    public List<ChartData> ChartDatas1 = new List<ChartData>();

    Athlete Athlete = new();
    List<FileListNodeModel> fileList = new List<FileListNodeModel>();

    protected override async Task OnInitializedAsync()
    {
        Athlete = await BrowseAthleteService.GetByCodeAsync(Code, CurrentAthleteExamine);
        (CTMSModel, fileList) = await BrowseAthleteService
        .GetCurrentDataAsync(Athlete, CurrentAthleteExamine);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
        }
        data = CTMSModel.心理韌性;
        BuildChart();
        StateHasChanged();
    }

    async Task OnChangeExamineAsync(string examineTime)
    {
        (CTMSModel, fileList) = await BrowseAthleteService
        .ChangeCurrentDataAsync(Athlete, CurrentAthleteExamine, examineTime);

        BuildChart();
        StateHasChanged();
    }

    void BuildChart()
    {
        ChartDatas1 = new List<ChartData>()
        {
            new ChartData{ X= "冒險性", Y= data.冒險性.ToDouble() },
            new ChartData{ X= "抗壓力", Y= data.抗壓力.ToDouble() },
            new ChartData{ X= "堅持度", Y= data.堅持度.ToDouble() },
        };
    }
}