@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@inject NavigationManager NavigationManager
@inject PatientService PatientService
@inject DropDownListDataService DropDownListDataService
@inject BloodExameService BloodExameService
@inject RandomListService RandomListService

<div>

    @if (Items != null && Items.Count > 0)
    {
        var index = 0;
        string rowClass = string.Empty;

        <div class="sample-table-container">
            <table class="sample-table">
                <thead>
                    <tr>
                        <th class="">Subject Code</th>
                        <th class="">Key Name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Items)
                    {
                        if (index++ % 2 == 0)
                        {
                            rowClass = "row-normal";
                        }
                        else
                        {
                            rowClass = "row-highlighted";
                        }
                        <tr class="@rowClass">
                            <td class="item-cell ">@item.SubjectNo</td>
                            <td class="item-cell ">@item.KeyName</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<MessageBox Height="@MessageBox.Height" Width="@MessageBox.Width"
            IsVisible="@MessageBox.IsVisible"
            Title="@MessageBox.Title" Message="@MessageBox.Body"
            Callback="MessageBox.MessageDelegate" />

<ConfirmBox Height="@ConfirmMessageBox.Height" Width="@ConfirmMessageBox.Width"
            IsVisible="@ConfirmMessageBox.IsVisible"
            Title="@ConfirmMessageBox.Title" Message="@ConfirmMessageBox.Body"
            Callback="ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />

@code {
    public class PatientAIKeyNameViewModel
    {
        public string SubjectNo { get; set; } = string.Empty;
        public string KeyName { get; set; } = string.Empty;
    }

    ConfirmBoxModel ConfirmMessageBox { get; set; } = new ConfirmBoxModel();
    MessageBoxModel MessageBox { get; set; } = new MessageBoxModel();
    List<PatientAIKeyNameViewModel> Items = new();
    PatientData patientData = new();

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetDataAsync(firstRender);
        }
    }

    async Task GetDataAsync(bool firstRender)
    {
        Items.Clear();
        var patientItems = await PatientService.GetAsync();
        foreach (var patient in patientItems)
        {
            patientData.FromJson(patient.JsonData);
            var model = new PatientAIKeyNameViewModel()
            {
                SubjectNo = patientData.臨床資訊.SubjectNo,
                KeyName = patientData.臨床資訊.KeyName
            };
            Items.Add(model);
        }

        if(firstRender)
        {
            StateHasChanged();
        }
    }
}
