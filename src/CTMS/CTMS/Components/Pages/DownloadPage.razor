@page "/Download"
@using CTMS.Share.Helpers
@using Newtonsoft.Json
@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject UploadFileService UploadFileService
@inject ExcleService ExcleService
@inject DownloadFileService DownloadFileService
@inject RestoreFileService RestoreFileService
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using CTMS.Business.Extensions

@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService
@inject AuthenticationStateHelper AuthenticationStateHelper
@inject AuthenticationStateProvider authStateProvider

<PageTitle>檔案備份與還原</PageTitle>

@if (string.IsNullOrEmpty(RoleMessage) == false)
{
    <div class="alert alert-danger" role="alert">
        @RoleMessage
    </div>
}
else
{
    <div>
        <div class="page-top">
            <button class="back-btn" @onclick=OnBack>&lt; 上頁</button>
            <span class="page-title">檔案備份與還原</span>
        </div>

        <div class="m-5">
            <div class="btn btn-primary" @onclick="OnreparationAsync">重新準備檔案</div>
            @if (canDownload)
            {
                <a class="btn btn-success m-2" href="@zipFilename" download>下載</a>
            }
            @* <div class="btn btn-warning">打包下載</div> *@
        </div>
        <br />
        <hr />
        <br />

        <div class="m-5">
            <div class="upload-area">
                <div class="m-2">
                    請將所有的檔案拖拉到這裡，或者點選 Browser 選取所有要上傳的檔案
                </div>
                <div class="upload-files-control">
                    <SfUploader @ref="upload1" AutoUpload="false" AllowMultiple="false"
                                ShowProgressBar="true" MaxFileSize="102400000">
                        <UploaderEvents ValueChange="UploaderChange"></UploaderEvents>
                    </SfUploader>
                </div>
            </div>
            <div>
                <div class="text-info h2 m-2">
                    @UploadingMessage
                    @if (UploadingMessage != " ")
                    {
                    }
                </div>
            </div>
            <div class="btn btn-primary" @onclick="OnRestoreAsync">還原</div>
        </div>

        <div class="m-5">
            @foreach (var item in ProcessingMessing)
            {
                <div>@item</div>
            }
        </div>
    </div>
}

<MessageBox Height="@MessageBox.Height" Width="@MessageBox.Width"
            IsVisible="@MessageBox.IsVisible"
            Title="@MessageBox.Title" Message="@MessageBox.Body"
            Callback="MessageBox.MessageDelegate" />

<ConfirmBox Height="@ConfirmMessageBox.Height" Width="@ConfirmMessageBox.Width"
            IsVisible="@ConfirmMessageBox.IsVisible"
            Title="@ConfirmMessageBox.Title" Message="@ConfirmMessageBox.Body"
            Callback="ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />

@code {
    SfUploader upload1;
    List<string> athletesDone = new();
    List<string> ProcessingMessing = new();
    string zipFilename = "";
    string UploadingMessage = "　";
    bool canDownload = false;
    string path = MagicObjectHelper.UploadTempPath;
    string pathZip = MagicObjectHelper.UploadTempPath;

    ConfirmBoxModel ConfirmMessageBox { get; set; } = new ConfirmBoxModel();
    MessageBoxModel MessageBox { get; set; } = new MessageBoxModel();
    string RoleMessage = string.Empty;

    protected override void OnInitialized()
    {
        zipFilename = Path.Combine(MagicObjectHelper.DownloadPath, "MyDownload.zip");

    }

    protected override async Task OnInitializedAsync()
    {
        var checkResult = await AuthenticationStateHelper
            .Check(authStateProvider, NavigationManager);
        if (checkResult == true)
        {
            if (AuthenticationStateHelper.CheckAccessPage(MagicObjectHelper.ROLE備份還原) == false)
            {
                RoleMessage = MagicObjectHelper.你沒有權限存取此頁面;
            }
            else
            {
            }
        }
    }

    void OnBack()
    {
        NavigationManager.NavigateTo($"/");
    }

    public async Task UploaderChange(UploadChangeEventArgs args)
    {
        UploadingMessage = "檔案上傳中，請稍後...";
        foreach (var uploadFile in args.Files)
        {
            try
            {
                var file = uploadFile.File;
                using (var inputStream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 100))
                {
                    var inputFileName = $"{uploadFile.FileInfo.Name}";

                    // 將 inputFileName 內容複製到指定 path 目錄下，檔案名稱要相同
                    pathZip = Path.Combine(path, inputFileName);
                    using (var fileStream = new FileStream(pathZip, FileMode.Create, FileAccess.Write))
                    {
                        await inputStream.CopyToAsync(fileStream);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        UploadingMessage = "可以準備進行還原";
    }

    async Task OnRestoreAsync()
    {
        ProcessingMessing.Clear();
        await RestoreFileService.PrepareAsync(pathZip, ProcessingMessing, RefreshMessages);
        UploadingMessage = "資料已經還原完成";
        ProcessingMessing.Clear();
    }

    async Task OnreparationAsync()
    {
        ProcessingMessing.Clear();
        await DownloadFileService.PrepareAsync(ProcessingMessing, RefreshMessages);
        canDownload = true;
    }

    void RefreshMessages()
    {
        StateHasChanged();
    }

}
