@page "/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject MyUserServiceLogin MyUserServiceLogin

@layout NoFooterLayout
@inject ILogger<ChangePasswordPage> Logger

@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService
@inject AuthenticationStateHelper AuthenticationStateHelper
@inject AuthenticationStateProvider authStateProvider
@inject MyUserService MyUserService

<style>
    .form-input {
        flex: 1;
        padding: 10px;
        border: 2px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
        transition: border-color 0.3s ease;
    }

        .form-input:focus {
            outline: none;
            border-color: #007bff;
        }
</style>

<PageTitle>變更密碼</PageTitle>

<div class="change-password-container">
    <div class="app-title">AI 臨床試驗管理平臺</div>
    <div class="change-password-card">
        <div class="change-password-header">
            變更密碼
        </div>

        <EditForm Model="@Input" class="change-password-form" autocomplete="off">
            <input type="text"
                   autocomplete="username"
                   value="CurrentUser?.Account"
                   tabindex="-1"
                   aria-hidden="true"
                   style="position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;opacity:0;" />

            <div class="form-group">
                <label class="form-label">密碼</label>
                <InputText class="form-input" placeholder="請輸入密碼" type="password"
                           @bind-Value="@Input.NewPassword1" autocomplete="new-password" name="access-key-account1" />
            </div>

            <div class="form-group">
                <label class="form-label">確認密碼</label>
                <InputText type="password" class="form-input" placeholder="請再次輸入密碼"
                           @bind-Value="@Input.NewPassword2" autocomplete="new-password" name="access-key-account2" />
            </div>

            <div class="change-password">
                <button class="change-password-button" @onclick=ProcessChangePassword>變更密碼</button>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="error-message">@message</div>
            }
        </EditForm>
    </div>
</div>

@code {
    class passwordModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string NewPassword1 { get; set; } = "";
        [Required]
        [DataType(DataType.Password)]
        [Compare("NewPassword1", ErrorMessage = "密碼與確認密碼不相符")]
        public string NewPassword2 { get; set; } = "";
    }
    string errorMessage = string.Empty;
    string errorMessageClass = "";

    private passwordModel Input { get; set; } = new();
    MyUserAdapterModel CurrentUser = new MyUserAdapterModel();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await AuthenticationStateHelper
        .GetUserInformation(authStateProvider);
        if (CurrentUser == null)
        {
            NavigationManager.NavigateTo("/Auths/Logout", forceLoad: true);
        }
        else
        {
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // base.OnAfterRender(firstRender);
        // if (firstRender)
        // {
        //     NavigationManager.NavigateTo("/Auths/Login", forceLoad: true);
        // }
    }

    public async Task ProcessChangePassword()
    {
        message = "";
        errorMessage = "";

        if (string.IsNullOrEmpty(Input.NewPassword1) || string.IsNullOrEmpty(Input.NewPassword2))
        {
            message = "請輸入密碼";
            errorMessage = "alert-danger";
            return;
        }

        if (Input.NewPassword1 != Input.NewPassword2)
        {
            message = "密碼與確認密碼不相符";
            errorMessage = "alert-danger";
            return;
        }

        string changeResult = await MyUserService.ChangePasswordAsync(CurrentUser.Id, Input.NewPassword1);
        if (string.IsNullOrEmpty(changeResult))
        {
            NavigationManager.NavigateTo("/Auths/Logout", forceLoad: true);
        }
        else
        {
            message = changeResult;
            errorMessage = "alert-danger";
        }

        // if (string.IsNullOrEmpty(Input.Account))
        // {
        //     message = "請輸入帳號";
        //     errorMessage = "alert-danger";
        //     return;
        // }
        // else if (string.IsNullOrEmpty(Input.Password))
        // {
        //     message = "請輸入密碼";
        //     errorMessage = "alert-danger";
        //     return;
        // }
        // (string result, MyUser myUser) = await MyUserServiceLogin.LoginAsync(Input.Account, Input.Password);
        // if (result != string.Empty)
        // {
        //     message = result;
        // }
        // else
        // {
        //     #region 加入這個使用者需要用到的 宣告類型 Claim Type
        //     var claims = new List<Claim>
        //         {
        //             new Claim(ClaimTypes.Role, "User"),
        //             new Claim(ClaimTypes.Name, myUser.Name),
        //             new Claim(ClaimTypes.NameIdentifier, myUser.Account),
        //             new Claim(ClaimTypes.Sid, myUser.Id.ToString()),
        //         };
        //     #endregion

        //     #region 建立 宣告式身分識別
        //     // ClaimsIdentity類別是宣告式身分識別的具體執行, 也就是宣告集合所描述的身分識別
        //     var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        //     #endregion

        //     #region 建立關於認證階段需要儲存的狀態
        //     string returnUrl = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
        //     var authProperties = new AuthenticationProperties
        //         {
        //             IsPersistent = true,
        //             RedirectUri = returnUrl,
        //         };
        //     #endregion

        //     #region 進行使用登入
        //     try
        //     {
        //         await HttpContext.SignInAsync(
        //             "CookieAuthenticationScheme",
        //         new ClaimsPrincipal(claimsIdentity),
        //         authProperties);
        //         // NavigationManager.NavigateTo("/weather", forceLoad:true);
        //     }
        //     catch (Exception ex)
        //     {
        //         message = ex.Message;
        //     }
        //     #endregion
        // }
        // if (string.IsNullOrEmpty(message))
        // {
        //     errorMessage = "";
        // }
        // else
        // {
        //     errorMessage = "alert-danger";
        // }
    }
}