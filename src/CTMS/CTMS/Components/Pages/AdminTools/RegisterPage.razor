@page "/Register"

@using System.ComponentModel.DataAnnotations
@using CTMS.DataModel.Models.Systems
@layout NoFooterLayout
@inject NavigationManager NavigationManager
@inject ILogger<RegisterPage> Logger
@inject RegisterModelService RegisterModelService

<style>
    .form-input {
        flex: 1;
        padding: 10px;
        border: 2px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
        transition: border-color 0.3s ease;
    }

        .form-input:focus {
            outline: none;
            border-color: #007bff;
        }
</style>

<PageTitle>帳號申請</PageTitle>

<div class="register-container">
    <div class="app-title">AI 臨床試驗管理平臺</div>
    <div class="register-card">
        <div class="register-header">
            帳號申請
        </div>

        <EditForm Model="@Model" OnValidSubmit="RegisterUser" class="register-form" autocomplete="off">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label class="form-label">名稱</label>
                <InputText class="form-input" @bind-Value="Model.Name" placeholder="請輸入名稱" autocomplete="off" name="register-name" />
            </div>

            <div class="form-group">
                <label class="form-label">帳號</label>
                <InputText class="form-input" @bind-Value="Model.Account" placeholder="請輸入帳號" autocomplete="off" name="register-account" />
            </div>

            <div class="form-group">
                <label class="form-label">密碼</label>
                <InputText type="password" class="form-input" @bind-Value="Model.Password" placeholder="請輸入密碼" autocomplete="new-password" name="new-password" />
            </div>

            <div class="form-group">
                <label class="form-label">信箱</label>
                <InputText type="email" class="form-input" @bind-Value="Model.Email" placeholder="請輸入電子郵件" autocomplete="off" name="register-email" />
            </div>

            <div class="register">
                <button class="register-button" type="submit">送出申請</button>
            </div>

            <div style="text-align:center;margin-top:10px;">
                <a href="/Auths/Login" class="return-link">回到登入</a>
            </div>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="error-message">@Message</div>
            }
        </EditForm>
    </div>
</div>


<MessageBox Height="@MessageBox.Height" Width="@MessageBox.Width"
            IsVisible="@MessageBox.IsVisible"
            Title="@MessageBox.Title" Message="@MessageBox.Body"
            Callback="MessageBox.MessageDelegate" />

@code {
    private RegisterModel Model { get; set; } = new();
    string Message = string.Empty;
    ConfirmBoxModel ConfirmMessageBox { get; set; } = new ConfirmBoxModel();
    MessageBoxModel MessageBox { get; set; } = new MessageBoxModel();

    private async Task RegisterUser()
    {
        Message = string.Empty;

        // 基本檢查（DataAnnotations 會先驗證）
        if (string.IsNullOrWhiteSpace(Model.Name) ||
            string.IsNullOrWhiteSpace(Model.Account) ||
            string.IsNullOrWhiteSpace(Model.Password) ||
            string.IsNullOrWhiteSpace(Model.Email))
        {
            Message = "請完整填寫所有欄位";
            return;
        }

        try
        {
            await RegisterModelService.Get();
            Model.Status = "待審核";
            Model.CreateAt = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            RegisterModelService.RegisterModels.Add(Model);
            await RegisterModelService.Save();

            // 目前僅做前端流程 (後端註冊服務可在此呼叫)
            Message = "申請已送出，系統將通知您後續處理。";
            // 若要導回登入頁：
            bool result = false;
            var task2 = MessageBox.ShowAsync("400px", "200px",
            "錯誤", $"帳號 「{Model.Account}」 申請已送出，系統將通知您後續處理！",
            MessageBox.HiddenAsync);
            StateHasChanged();
            await task2;
            NavigationManager.NavigateTo("/");
            return;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "註冊發生例外");
            Message = "註冊發生錯誤，請稍後再試。";
        }
        StateHasChanged();
        await Task.Delay(5000);
        NavigationManager.NavigateTo("/");
    }

}