@page "/GptExperiment/{code}"
@using Newtonsoft.Json
@using System.Text.RegularExpressions
@layout EmptyLayout
@inject UploadFileService UploadFileService
@inject GptService GptService
@inject NavigationManager NavigationManager

<PageTitle>數位健康運動管理平台</PageTitle>

<div>
    <div class="page-top">
        <button class="back-btn" @onclick=OnBack>&lt; 上頁</button>
        <span class="page-title">綜合評估建議</span>
    </div>

    <div class="container-custom">
        <div class="header">
            <h1>GPT提出的建議</h1>
        </div>
        <div class="d-inline">
            <button class="btn btn-primary" @onclick=OnGptAsync>實驗一</button>
            <button class="btn btn-primary" @onclick=OnGpt2Async>實驗二</button>
            <button class="btn btn-primary" @onclick=OnGpt3Async>實驗三</button>
        </div>
        <div class="metrics">
            <div class="metric-box dark-blue">
                <div class="metric-value">
                    @foreach (var item in suggession)
                    {
                        @if (item != null && string.IsNullOrEmpty(item.Trim())==false)
                        {
                            <p>@item</p>
                        }
                        @*                     @((MarkupString)Regex.Replace(
                    HttpUtility.HtmlEncode(@multilineString), "\r?\n|\r", "<br />"))
                    *@
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Code { get; set; }
    List<string> suggession = new List<string>();

    NextGenerationSportsCTMSModel CTMSModel = new();
    ComprehensiveAssessmentRecommendation綜合評估建議Model RecommendationModel = new();

    protected override async Task OnInitializedAsync()
    {
        var Athlete = await UploadFileService.GetAsync(Code);
        CTMSModel = JsonConvert
        .DeserializeObject<NextGenerationSportsCTMSModel>(Athlete.ExcelData);
    }

    void OnBack()
    {
        NavigationManager.NavigateTo($"/Browse");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            RecommendationModel = CTMSModel.ComprehensiveAssessmentRecommendation綜合評估建議Model;
            StateHasChanged();
        }
    }

    async Task OnGptAsync()
    {
        suggession.Clear();
        suggession.Add("分析中... 請稍後");
        string result = "";
        result = GetInformation();
        result += "請提出關於 飲食、運動、肌群強化、補充品方面的建議" + "\n";

        List<string> prompt = new List<string>();
        // 將 result 使用 \n 做分割，加入倒 prompt
        var foo = result.Split("\n");
        foreach (var item in foo)
        {
            suggession.Add(item);
        }

        suggession = await GptService.ZeroShotAsync(result);
    }

    async Task OnGpt2Async()
    {
        suggession.Clear();
        suggession.Add("分析中... 請稍後");
        string result = "";
        result = GetInformation();
        result += "請提出關於 飲食、運動、肌群強化、補充品方面的建議" + "\n";
        result += "" + "\n";
        
        List<string> prompt = new List<string>();
        // 將 result 使用 \n 做分割，加入倒 prompt
        var foo = result.Split("\n");
        foreach (var item in foo)
        {
            suggession.Add(item);
        }

        suggession = await GptService.ZeroShotAsync(result);
    }

    async Task OnGpt3Async()
    {
        suggession.Clear();
        suggession.Add("分析中... 請稍後");
        string result = "";
        result = GetInformation();
        result += "請使用底下格式產生相關內容" + "\n";
        result += "[運動員整體分析]:{首先根據該運動員的基本資訊，說明該運動員的狀態的分析和建議}" + "\n";
        result += "每個飲食、運動、肌群強化、補充品方面項目需要具有底下格式" + "\n";
        result += "  ※※ 主題 ※※ { 該分析項目的名稱}" + "\n";
        result += "  [摘要]：{ 針對相關數據，對於該項目需要注意的地方，使用最精簡方式進行總結}" + "\n";
        result += "  [說明與建議]：{ 列出至少四個建議項目}" + "\n";
        result += "  [總結]：{ 使用最佳分析結果，進行最多六個中文字進行總結}" + "\n";
        result += "" + "\n";

        List<string> prompt = new List<string>();
        // 將 result 使用 \n 做分割，加入倒 prompt
        var foo = result.Split("\n");
        foreach (var item in foo)
        {
            suggession.Add(item);
        }

        suggession = await GptService.ZeroShotAsync(result);
    }

    public string GetInformation()
    {
        string result = "";
        result += "運動員基本資料" + "\n";
        result += "性別:" + CTMSModel.HomePageModel.性別 + "\n";
        result += "年齡:" + CTMSModel.HomePageModel.真實年齡 + "\n";
        result += "身高:" + CTMSModel.HomePageModel.身高 + "\n";
        result += "體重:" + CTMSModel.HomePageModel.體重 + "\n";
        result += "BMI:" + CTMSModel.HomePageModel.BMI + "\n";
        result += "身體檢驗數值" + "\n";
        result += "內臟脂肪百分位:" + CTMSModel.ComprehensiveAssessmentRecommendation綜合評估建議Model
        .VisceralFatPercentile內臟脂肪百分位 + "\n";
        result += "皮下脂肪百分位:" + CTMSModel.ComprehensiveAssessmentRecommendation綜合評估建議Model
        .SubcutaneousFatPercentile皮下脂肪百分位 + "\n";
        result += "代謝失調風險:" + CTMSModel.ComprehensiveAssessmentRecommendation綜合評估建議Model
        .MetabolicDisorderRisk代謝失調風險 + "\n";
        result += "腰圍百分位:" + CTMSModel.ComprehensiveAssessmentRecommendation綜合評估建議Model
        .WaistCircumferencePercentile腰圍百分位 + "\n";
        result += "肌肉健康度:" + CTMSModel.ComprehensiveAssessmentRecommendation綜合評估建議Model
        .MuscleHealth肌肉健康度 + "\n";
        result += "肌力:" + CTMSModel.ComprehensiveAssessmentRecommendation綜合評估建議Model
        .MuscleStrength肌力 + "\n";
        result += "肌耐力:" + CTMSModel.ComprehensiveAssessmentRecommendation綜合評估建議Model
        .MuscleEndurance肌耐力 + "\n";
        result += "核心均衡力:" + CTMSModel.ComprehensiveAssessmentRecommendation綜合評估建議Model
        .CoreBalance核心均衡力 + "\n";
        result += "\n";
        return result;
    }
}