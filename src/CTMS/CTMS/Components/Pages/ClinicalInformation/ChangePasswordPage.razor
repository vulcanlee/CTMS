@page "/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject MyUserServiceLogin MyUserServiceLogin

@layout EmptyLayout
@inject ILogger<ChangePasswordPage> Logger

@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService
@inject AuthenticationStateHelper AuthenticationStateHelper
@inject AuthenticationStateProvider authStateProvider
@inject MyUserService MyUserService

<style>
    .data-input-outter {
        background-color: transparent;
        border: none;
        outline: none;
    }

</style>
<PageTitle>變更密碼</PageTitle>

<div class="login-page">
    <div class="container">
        <div class="screen">
            <div class="screen__content">
                <EditForm Model="@Input">
                    <div class="form-space-top">
                        <div class="login_title__field">密碼</div>
                        <div class="login__field">
                            <i class="login__icon fas fa-user"></i>
                            <div class="login__input">
                                <InputText class="data-input-iso data-input-outter bg-transparent" placeholder="請輸入密碼" type="password"
                                           @bind-Value="@Input.NewPassword1" autocomplete="off" />
                            </div>
                        </div>
                        <div class="login_title__field">在一次輸入密碼</div>
                        <div class="login__field">
                            <i class="login__icon fas fa-lock"></i>
                            <div class="login__input">
                                <InputText type="password" class="data-input-iso data-input-outter bg-transparent" placeholder="請輸入密碼"
                                           @bind-Value="@Input.NewPassword2" autocomplete="off" />
                            </div>
                        </div>

                        <button class="button login__submit" @onclick=ProcessChangePassword>
                            <span class="button__text">變更密碼</span>
                            <i class="button__icon fas fa-chevron-right"></i>
                        </button>

                        <div class="error-message-outter">
                            <div class="@errorMessage m-2 error-message">
                                @message
                            </div>
                        </div>
                    </div>
                </EditForm>
                <div class="social-login">
                    <h3 class="app-title">AI 臨床試驗管理平臺</h3>
                    <div class="social-icons">
                        <a href="#" class="social-login__icon fab fa-instagram"></a>
                        <a href="#" class="social-login__icon fab fa-facebook"></a>
                        <a href="#" class="social-login__icon fab fa-twitter"></a>
                    </div>
                </div>
            </div>
            <div class="screen__background">
                <span class="screen__background__shape screen__background__shape4"></span>
                <span class="screen__background__shape screen__background__shape3"></span>
                <span class="screen__background__shape screen__background__shape2"></span>
                <span class="screen__background__shape screen__background__shape1"></span>
            </div>
        </div>
    </div>
</div>

@code {
    class passwordModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string NewPassword1 { get; set; } = "";
        [Required]
        [DataType(DataType.Password)]
        [Compare("NewPassword1", ErrorMessage = "密碼與確認密碼不相符")]
        public string NewPassword2 { get; set; } = "";
    }
    string errorMessage = string.Empty;
    string errorMessageClass = "";

    private passwordModel Input { get; set; } = new();
    MyUserAdapterModel CurrentUser = new MyUserAdapterModel();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await AuthenticationStateHelper
        .GetUserInformation(authStateProvider);
        if (CurrentUser == null)
        {
            NavigationManager.NavigateTo("/Auths/Logout", forceLoad: true);
        }
        else
        {
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // base.OnAfterRender(firstRender);
        // if (firstRender)
        // {
        //     NavigationManager.NavigateTo("/Auths/Login", forceLoad: true);
        // }
    }

    public async Task ProcessChangePassword()
    {
        message = "";
        errorMessage = "";

        if (string.IsNullOrEmpty(Input.NewPassword1) || string.IsNullOrEmpty(Input.NewPassword2))
        {
            message = "請輸入密碼";
            errorMessage = "alert-danger";
            return;
        }

        if (Input.NewPassword1 != Input.NewPassword2)
        {
            message = "密碼與確認密碼不相符";
            errorMessage = "alert-danger";
            return;
        }

        string changeResult = await MyUserService.ChangePasswordAsync(CurrentUser.Id, Input.NewPassword1);
        if(string.IsNullOrEmpty(changeResult))
        {
            NavigationManager.NavigateTo("/Auths/Logout", forceLoad: true);
        }
        else
        {
            message = changeResult;
            errorMessage = "alert-danger";
        }

        // if (string.IsNullOrEmpty(Input.Account))
        // {
        //     message = "請輸入帳號";
        //     errorMessage = "alert-danger";
        //     return;
        // }
        // else if (string.IsNullOrEmpty(Input.Password))
        // {
        //     message = "請輸入密碼";
        //     errorMessage = "alert-danger";
        //     return;
        // }
        // (string result, MyUser myUser) = await MyUserServiceLogin.LoginAsync(Input.Account, Input.Password);
        // if (result != string.Empty)
        // {
        //     message = result;
        // }
        // else
        // {
        //     #region 加入這個使用者需要用到的 宣告類型 Claim Type
        //     var claims = new List<Claim>
        //         {
        //             new Claim(ClaimTypes.Role, "User"),
        //             new Claim(ClaimTypes.Name, myUser.Name),
        //             new Claim(ClaimTypes.NameIdentifier, myUser.Account),
        //             new Claim(ClaimTypes.Sid, myUser.Id.ToString()),
        //         };
        //     #endregion

        //     #region 建立 宣告式身分識別
        //     // ClaimsIdentity類別是宣告式身分識別的具體執行, 也就是宣告集合所描述的身分識別
        //     var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        //     #endregion

        //     #region 建立關於認證階段需要儲存的狀態
        //     string returnUrl = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
        //     var authProperties = new AuthenticationProperties
        //         {
        //             IsPersistent = true,
        //             RedirectUri = returnUrl,
        //         };
        //     #endregion

        //     #region 進行使用登入
        //     try
        //     {
        //         await HttpContext.SignInAsync(
        //             "CookieAuthenticationScheme",
        //         new ClaimsPrincipal(claimsIdentity),
        //         authProperties);
        //         // NavigationManager.NavigateTo("/weather", forceLoad:true);
        //     }
        //     catch (Exception ex)
        //     {
        //         message = ex.Message;
        //     }
        //     #endregion
        // }
        // if (string.IsNullOrEmpty(message))
        // {
        //     errorMessage = "";
        // }
        // else
        // {
        //     errorMessage = "alert-danger";
        // }
    }
}
