@page "/BasicClinical/{code}"
@using CTMS.DataModel.Models.Systems
@using CTMS.Share.Helpers
@using Newtonsoft.Json
@layout EmptyLayout
@inject UploadFileService UploadFileService
@inject NavigationManager NavigationManager
@inject ExcleService ExcleService

@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService
@inject AuthenticationStateHelper AuthenticationStateHelper
@inject AuthenticationStateProvider authStateProvider
@inject BrowseAthleteService BrowseAthleteService
@inject CurrentAthleteExamine CurrentAthleteExamine
@using Microsoft.Extensions.Options
@inject IOptions<CTMSSettings> options

<PageTitle>主頁</PageTitle>

@if (string.IsNullOrEmpty(RoleMessage) == false)
{
    <div class="alert alert-danger" role="alert">
        @RoleMessage
    </div>
}
else
{
    string backUri = $"/Browser";
    <HeaderView BackUri=@backUri />

    @* <div>
        <div class="back-button-container">
            <button class="back-btn" @onclick=OnBack>&lt; 上頁</button>
        </div>
    </div> *@

    <div class="mw-100">
        <div class="container-custom">
            <BasicClinical2View Code=@Code />
        </div>
    </div>
}

<MessageBox Height="@MessageBox.Height" Width="@MessageBox.Width"
            IsVisible="@MessageBox.IsVisible"
            Title="@MessageBox.Title" Message="@MessageBox.Body"
            Callback="MessageBox.MessageDelegate" />

<ConfirmBox Height="@ConfirmMessageBox.Height" Width="@ConfirmMessageBox.Width"
            IsVisible="@ConfirmMessageBox.IsVisible"
            Title="@ConfirmMessageBox.Title" Message="@ConfirmMessageBox.Body"
            Callback="ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />


@code {
    [Parameter]
    public string Code { get; set; }

    HomePageModel HomePageModel = new();
    string imagefile = "";

    ConfirmBoxModel ConfirmMessageBox { get; set; } = new ConfirmBoxModel();
    MessageBoxModel MessageBox { get; set; } = new MessageBoxModel();
    string RoleMessage = string.Empty;

    Athlete Athlete = new();
    NextGenerationSportsCTMSModel CTMSModel = new();
    List<FileListNodeModel> fileList = new List<FileListNodeModel>();


    protected override async Task OnInitializedAsync()
    {
        var checkResult = await AuthenticationStateHelper
        .Check(authStateProvider, NavigationManager);
        if (checkResult == true)
        {
            if (AuthenticationStateHelper.CheckAccessPage(MagicObjectHelper.ROLE瀏覽) == false)
            {
                RoleMessage = MagicObjectHelper.你沒有權限存取此頁面;
            }
            else
            {
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
    }

    void OnBack()
    {
        NavigationManager.NavigateTo("/Browser", true, true);
    }
}