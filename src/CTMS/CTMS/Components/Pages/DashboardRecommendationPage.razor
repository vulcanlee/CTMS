@page "/Recommendation/{code}"
@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject UploadFileService UploadFileService

@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService
@inject AuthenticationStateHelper AuthenticationStateHelper
@inject AuthenticationStateProvider authStateProvider
@inject BrowseAthleteService BrowseAthleteService
@inject CurrentAthleteExamine CurrentAthleteExamine

<PageTitle>綜合評估建議 儀錶板</PageTitle>

@if (string.IsNullOrEmpty(RoleMessage) == false)
{
    <div class="alert alert-danger" role="alert">
        @RoleMessage
    </div>
}
else
{
<div>
    <div class="page-top">
        <button class="back-btn" @onclick=OnBack>&lt; 上頁</button>
        <span class="page-title">綜合評估建議 儀錶板</span>
        <button class="editor-btn" @onclick=OnEdit>修改</button>
    </div>

    <div class="page-body">
        <RecommendationView Code="@Code" />
    </div>
</div>
}

<MessageBox Height="@MessageBox.Height" Width="@MessageBox.Width"
            IsVisible="@MessageBox.IsVisible"
            Title="@MessageBox.Title" Message="@MessageBox.Body"
            Callback="MessageBox.MessageDelegate" />

<ConfirmBox Height="@ConfirmMessageBox.Height" Width="@ConfirmMessageBox.Width"
            IsVisible="@ConfirmMessageBox.IsVisible"
            Title="@ConfirmMessageBox.Title" Message="@ConfirmMessageBox.Body"
            Callback="ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />

@code {
    [Parameter]
    public string Code { get; set; }

    ConfirmBoxModel ConfirmMessageBox { get; set; } = new ConfirmBoxModel();
    MessageBoxModel MessageBox { get; set; } = new MessageBoxModel();
    string RoleMessage = string.Empty;

    Athlete Athlete = new();

    protected override void OnInitialized()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        var checkResult = await AuthenticationStateHelper
            .Check(authStateProvider, NavigationManager);
        if (checkResult == true)
        {
            if (AuthenticationStateHelper.CheckAccessPage(MagicObjectHelper.ROLE綜合評估建議) == false)
            {
                RoleMessage = MagicObjectHelper.你沒有權限存取此頁面;
            }
            else
            {
            }
        }
    }
    void OnBack()
    {
        NavigationManager.NavigateTo($"/DashboardHome/{Code}");
    }

    void OnEdit()
    {
        if (AuthenticationStateHelper.CheckAccessPage(MagicObjectHelper.ROLE綜合評估建議編輯) == false)
        {
            var checkTask = ConfirmMessageBox.ShowAsync("400px", "200px", "警告",
                 MagicObjectHelper.你沒有權限存取此頁面, ConfirmMessageBox.HiddenAsync);
            return;
        }
        NavigationManager.NavigateTo($"/RecommendationEditor/{Code}");
    }

}
